<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git常用指令</title>
    <link href="/2023/08/17/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/08/17/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><h3 id="Git-常用的六个命令是什么？"><a href="#Git-常用的六个命令是什么？" class="headerlink" title="Git 常用的六个命令是什么？"></a>Git 常用的六个命令是什么？</h3><blockquote><p><strong>git clone</strong>克隆代码；<br><strong>git log</strong>查看日志；<br><strong>git tag</strong>查看标签；<br><strong>git branch</strong>查看分支；<br><strong>git branch -a</strong>查看远程分支；<br><strong>git pull</strong>拉取。</p></blockquote><ul><li><strong>git init</strong> # 初始化本地 git 仓库(创建新仓库)</li><li><strong>git config –global user.name “”</strong> # 配置用户名</li><li><strong>git config –global user.email “”</strong> # 配置邮箱</li><li><strong>git config –global color.ui true</strong> # git status 等命令自动着色</li><li><strong>git status</strong> 这个命令顾名思义就是查看状态， 这个命令可以算是使用最频繁的一个命令了， 建议大家没事就输入下这个命令， 来查看你当前 git 仓库的一些状态。</li><li><strong>git add</strong> 文件名将文件添加到git仓库中 git add . 就是将没添加的数据都添加上去</li><li><strong>git commit -m ’ ’</strong> 在add之后提交 -m ‘ ’ 放入提交信息 如：first<br>  commit 执行了以上命令代表我们已经正式进行了第一次提交</li></ul><p>  看到这里估计很多人会有疑问， 我想要提交直接进行 commit 不就行了么， 为什么先要再 add一次呢？ 首先 git add 是先把改动添加到一个「暂存区」 ， 你可以理解成是一个缓存区域， 临时保存你的改动， 而 git commit 才是最后真正的提交。 这样做的好处就是防止误提交， 当然也有办法把这两步合并成一步， 不过后面再介绍， 建议新手先按部就班的一步步来。</p><ul><li><p><strong>git branch</strong> 列出本地所有的分支</p><blockquote><p><strong>git branch -r</strong> 列出所有远程分支<br><strong>git branch [name]</strong> 新建一个分支，但依然停留在当前分支<br><strong>git checkout -b [branch]</strong> 新建一个分支，并切换到该分支<br><strong>git merge [branch]</strong> 合并指定分支到当前分支<br><strong>git branch -d [name]</strong> 删除分支<br><strong>git checkout [name]</strong> <a href="https://so.csdn.net/so/search?q=%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF&spm=1001.2101.3001.7020">切换分支</a><br><strong>git push origin –delete [name]</strong> 删除远端分支</p><p><strong>git push origin –delete feat-20221031-amisgit branch -dr [remote&#x2F;branch]</strong> 删除远端分支</p></blockquote></li><li><p><strong>git config –list</strong> 显示当前<a href="https://so.csdn.net/so/search?q=Git%E9%85%8D%E7%BD%AE&spm=1001.2101.3001.7020">Git配置</a></p></li><li><p>设置提交代码时的用户信息</p><blockquote><p><strong>git config –global user.name “[name]”</strong><br><strong>git config –global user.email “[email address]”</strong></p></blockquote></li><li><blockquote><p>-d：可以删除文件夹，因为默认是删除的是file</p></blockquote><blockquote><p>-f：代表强制，如果clean.requireForce配置的为true，则git clean会执行失败，此时可以使用git clean -f强制执行。</p></blockquote><blockquote><p>-i：interactive，可交互的删除文件或目录，这个就比较有意思了，哈哈。</p></blockquote><blockquote><p>-n：dry-run，加入了这个参数，会提示你将会删除哪些文件，但不会删除这些文件。如果确定是你要删除的文件，在将-n这个参数     去掉在执行就OK了。</p></blockquote></li></ul><h2 id="新建代码"><a href="#新建代码" class="headerlink" title="新建代码"></a>新建代码</h2><p>在当前目录新建一个Git代码库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>新建一个目录，将其初始化为Git代码库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span> [project-name]<br></code></pre></td></tr></table></figure><p>下载一个项目和它的整个代码历史</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">git <span class="hljs-keyword">clone</span> [url]<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>显示当前的<a href="https://so.csdn.net/so/search?q=Git%E9%85%8D%E7%BD%AE&spm=1001.2101.3001.7020">Git配置</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>编辑Git配置文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> -e [<span class="hljs-comment">--global]</span><br></code></pre></td></tr></table></figure><p>设置提交代码时的用户信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git config [--<span class="hljs-keyword">global</span>] user.name <span class="hljs-string">&quot;[name]&quot;</span><br><br><br><br>git config [--<span class="hljs-keyword">global</span>] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h2 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><p>添加指定文件到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git add [file1] [file2] ...<br></code></pre></td></tr></table></figure><p>添加指定目录到暂存区，包括子目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">add</span> [dir]<br></code></pre></td></tr></table></figure><p>加当前目录的所有文件到暂存区</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">add</span> .<br></code></pre></td></tr></table></figure><p>删除工作区文件，并且将这次删除放入暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git rm [file1] [file2] ...<br></code></pre></td></tr></table></figure><p>停止追踪指定文件，但该文件会保留在工作区</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git rm <span class="hljs-attr">--cached</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>改名文件，并且将这个改名放入暂存区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">mv</span> <span class="hljs-selector-attr">[file-original]</span> <span class="hljs-selector-attr">[file-renamed]</span><br></code></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>提交暂存区到仓库区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">commit</span> <span class="hljs-selector-tag">-m</span> <span class="hljs-selector-attr">[message]</span><br></code></pre></td></tr></table></figure><p>提交暂存区的指定文件到仓库区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git commit [file1] [file2] ... -m [message]<br></code></pre></td></tr></table></figure><p>提交工作区自上次commit之后的变化，直接到仓库区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>a<br></code></pre></td></tr></table></figure><p>提交时显示所有diff信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>v<br></code></pre></td></tr></table></figure><p>使用一次新的commit，替代上一次提交</p><p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend -m [message]</span><br></code></pre></td></tr></table></figure><p>重做上一次commit，并包括指定文件的新变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend   ...</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch<br></code></pre></td></tr></table></figure><p>列出所有远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch -r<br></code></pre></td></tr></table></figure><p>列出所有本地分支和远程分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>新建一个分支，但依然停留在当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，并切换到该分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，指向指定commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，与指定的远程分支建立追踪关系</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git branch <span class="hljs-attr">--track</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure><p>切换到指定分支，并更新工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>建立追踪关系，在现有分支与指定的远程分支之间</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git branch <span class="hljs-attr">--set-upstream</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure><p>合并指定分支到当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">merge</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>选择一个commit，合并进当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">cherry-pick</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p><a href="https://so.csdn.net/so/search?q=%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF&spm=1001.2101.3001.7020">删除分支</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-tag">-d</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">push</span> origin --<span class="hljs-keyword">delete</span> <br><br><br><br>git branch -dr<br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>列出所有tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag<br></code></pre></td></tr></table></figure><p>新建一个tag在当前commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">tag</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>新建一个tag在指定commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">tag</span> <span class="hljs-selector-attr">[tag]</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>查看tag信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>提交指定tag</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>提交所有tag</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--tags</span><br></code></pre></td></tr></table></figure><p>新建一个分支，指向某个tag</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><h2 id="查看所有信息"><a href="#查看所有信息" class="headerlink" title="查看所有信息"></a>查看所有信息</h2><p>显示有变更的文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">status</span><br></code></pre></td></tr></table></figure><p>显示当前分支的版本历史</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p>显示commit历史，以及每次commit发生变更的文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">log</span> --<span class="hljs-keyword">stat</span><br></code></pre></td></tr></table></figure><p>显示某个文件的版本历史，包括文件改名</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">git log <span class="hljs-attr">--follow</span> <span class="hljs-selector-attr">[file]</span><br><br><br><br>git whatchanged <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示指定文件相关的每一次diff</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git log -<span class="hljs-selector-tag">p</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示指定文件是什么人在什么时间修改过</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">blame</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示暂存区和工作区的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff<br></code></pre></td></tr></table></figure><p>显示暂存区和上一个commit的差异</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git diff <span class="hljs-attr">--cached</span> <span class="hljs-selector-attr">[]</span><br></code></pre></td></tr></table></figure><p>显示工作区与当前分支最新commit之间的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff HEAD<br></code></pre></td></tr></table></figure><p>显示两次提交之间的差异</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">diff</span> <span class="hljs-selector-attr">[first-branch]</span>...<span class="hljs-selector-attr">[second-branch]</span><br></code></pre></td></tr></table></figure><p>显示某次提交的元数据和内容变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">show</span> [<span class="hljs-keyword">commit</span>]<br></code></pre></td></tr></table></figure><p>显示某次提交发生变化的文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">show</span> <span class="hljs-comment">--name-only [commit]</span><br></code></pre></td></tr></table></figure><p>显示某次提交时，某个文件的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[commit]</span>:<span class="hljs-selector-attr">[filename]</span><br></code></pre></td></tr></table></figure><p>显示当前分支的最近几次提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reflog<br></code></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>下载远程仓库的所有变动</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">fetch</span> <span class="hljs-selector-attr">[remote]</span><br></code></pre></td></tr></table></figure><p>显示所有远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git remote -v<br></code></pre></td></tr></table></figure><p>显示某个远程仓库的信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[remote]</span><br></code></pre></td></tr></table></figure><p>增加一个新的远程仓库，并命名</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">add</span> <span class="hljs-selector-attr">[shortname]</span> <span class="hljs-selector-attr">[url]</span><br></code></pre></td></tr></table></figure><p>取回远程仓库的变化，并与本地分支合并</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>上传本地指定分支到远程仓库</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>强行推送当前分支到远程仓库，即使有冲突</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--force</span><br></code></pre></td></tr></table></figure><p>推送所有分支到远程仓库</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--all</span><br></code></pre></td></tr></table></figure><p>恢复暂存区的指定文件到工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>恢复某个commit的指定文件到工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[commit]</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>恢复上一个commit的所有文件到工作区</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git checkout .<br></code></pre></td></tr></table></figure><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git reset [file]<br></code></pre></td></tr></table></figure><p>重置暂存区与工作区，与上一次commit保持一致</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">reset</span> --hard<br></code></pre></td></tr></table></figure><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git reset [commit]<br></code></pre></td></tr></table></figure><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git reset <span class="hljs-attr">--hard</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git reset <span class="hljs-attr">--keep</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">revert</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成一个可供发布的压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git archive<br></code></pre></td></tr></table></figure><p>备份当前工作区的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git stash<br></code></pre></td></tr></table></figure><p>从Git栈中读取最近一次保存的内容，恢复工作区的相关内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git stash <span class="hljs-keyword">pop</span><br></code></pre></td></tr></table></figure><p>显示Git栈内的所有备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git stash list<br></code></pre></td></tr></table></figure><p>清空Git栈</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git stash <span class="hljs-attribute">clear</span><br></code></pre></td></tr></table></figure><p>git clean —— 未追踪文件清除神器</p><p>测试清理效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clean -dn<br></code></pre></td></tr></table></figure><p>输入下面的这句话，就会在你的浏览器出现关于git clean相关的详解。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git,GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2023/06/10/markdown%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <url>/2023/06/10/markdown%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h4 id="Markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档-在-2004-由约翰·格鲁伯创建-通过-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档，后缀一般为-md-markdown。"><a href="#Markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档-在-2004-由约翰·格鲁伯创建-通过-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档，后缀一般为-md-markdown。" class="headerlink" title="Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档,在 2004 由约翰·格鲁伯创建,通过 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，后缀一般为 .md, .markdown。"></a>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档,在 2004 由约翰·格鲁伯创建,通过 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，后缀一般为 .md, .markdown。</h4><hr><h5 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h5><h6 id="使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号。"><a href="#使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号。" class="headerlink" title="使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号。"></a>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号。</h6><ul><li>以此类推：</li></ul><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p></blockquote><hr><h5 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h5><h6 id="段落的换行是使用两个以上的空格加上回车"><a href="#段落的换行是使用两个以上的空格加上回车" class="headerlink" title="段落的换行是使用两个以上的空格加上回车"></a>段落的换行是使用两个以上的空格加上回车</h6><hr><h5 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h5><h6 id="用-或-包起来"><a href="#用-或-包起来" class="headerlink" title="用*或_包起来"></a>用*或_包起来</h6><ul><li><p>示例：</p><blockquote><p>*斜体文本* 或 _斜体文本_</p><blockquote><p><em>斜体文本</em></p></blockquote></blockquote><blockquote><p>** 粗体文本** 或 __ 粗体文本__</p><blockquote><p><strong>粗体文本</strong></p></blockquote></blockquote><blockquote><p>*** 斜粗体文本*** 或 ___ 斜粗体文本___</p><blockquote><p><strong><em>斜粗体文本</em></strong></p></blockquote></blockquote></li></ul><hr><h5 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h5><h6 id="可以用三个或三个以上的减号-星号-来建立一个分割线"><a href="#可以用三个或三个以上的减号-星号-来建立一个分割线" class="headerlink" title="可以用三个或三个以上的减号 星号 来建立一个分割线"></a>可以用三个或三个以上的减号 星号 来建立一个分割线</h6><ul><li>示例：<blockquote><p>*** &gt;---<br>效果：</p><blockquote><hr></blockquote></blockquote></li></ul><hr><h5 id="五、删除线"><a href="#五、删除线" class="headerlink" title="五、删除线"></a>五、删除线</h5><h6 id="在文字两端添加两个波浪线"><a href="#在文字两端添加两个波浪线" class="headerlink" title="在文字两端添加两个波浪线"></a>在文字两端添加两个波浪线</h6><ul><li>示例：<blockquote><p>没有加波浪线 1111<br>添加波浪线 ~~2222~~</p><blockquote><p><del>2222</del></p></blockquote></blockquote></li></ul><hr><h5 id="六、下划线"><a href="#六、下划线" class="headerlink" title="六、下划线"></a>六、下划线</h5><h6 id="通过-HTML-中的-u-标签实现"><a href="#通过-HTML-中的-u-标签实现" class="headerlink" title="通过 HTML 中的 u 标签实现"></a>通过 HTML 中的 u 标签实现</h6><ul><li>示例：<blockquote><p>&lt;u&gt;3&lt;&#x2F;u&gt;</p><blockquote><p><u>3333</u></p></blockquote></blockquote></li></ul><hr><h5 id="七、脚注"><a href="#七、脚注" class="headerlink" title="七、脚注"></a>七、脚注</h5><h6 id="脚注是对文本的补充说明"><a href="#脚注是对文本的补充说明" class="headerlink" title="脚注是对文本的补充说明"></a>脚注是对文本的补充说明</h6><ul><li>示例：<blockquote><p><a href="%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%82" title="是指掌握多种技能，并能利用多种技能独立完成产品的人">全栈工程师</a></p></blockquote></li></ul><hr><h5 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h5><h6 id="链接使用方法"><a href="#链接使用方法" class="headerlink" title="链接使用方法"></a>链接使用方法</h6><blockquote><p>[链接名称](链接地址)</p><blockquote><p><a href="https://www.runoob.com/" title="Runoob">菜鸟教程</a></p></blockquote></blockquote><blockquote><p>或者</p></blockquote><blockquote><p>&lt;链接地址&gt;</p><blockquote><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p></blockquote></blockquote><blockquote><p>高级链接<br>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：<br>[github]<a href="https://github.com/">1</a> [1]: <a href="https://github.com/">https://github.com/</a></p><blockquote><p><a href="https://github.com/">github</a></p></blockquote></blockquote><hr><h5 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h5><h6 id="使用-“-“-将代码区域包起来即可"><a href="#使用-“-“-将代码区域包起来即可" class="headerlink" title="使用 “`“ 将代码区域包起来即可"></a>使用 “`“ 将代码区域包起来即可</h6><h6 id="你也可以用-96-96-96-包裹一段代码，并指定一种语言（也可以不指定）"><a href="#你也可以用-96-96-96-包裹一段代码，并指定一种语言（也可以不指定）" class="headerlink" title="你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）"></a>你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）</h6><ul><li>示例:<blockquote><p>写法:</p><p>`&#96;&#96;javascript<br>$(document).ready(function () {<br>alert(“RUNOOB”);<br>});</p><p>`&#96;&#96;<br>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;RUNOOB&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2023/06/10/H5/"/>
    <url>/2023/06/10/H5/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML5-的笔记"><a href="#HTML5-的笔记" class="headerlink" title="HTML5 的笔记"></a>HTML5 的笔记</h2><p>echarts 柱状图插件<br>echarts 线上地址</p><script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script><p>setInterval()的返回值:每一次的序号(数字)<br>arr.push()的返回值:每一次添加后的新数组<br>jq 线上地址:</p><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>              <p>多媒体 1.音频 <audio src=""></audio><br>html 标签的属性:<br>controls 显示浏览器默认的音频控制器<br>autoplay 自动播放(谷歌,火狐浏览器不能实现自动播放)<br>loop 循环播放(单曲循环)<br>js 音频对象(jsDOM 对象)的属性<br>只读属性<br>paused 是否暂停<br>duration 返回音频的总播放时间<br>ended 是否播放完毕<br>error 媒体发生错误的时候,返回错误代码<br>currentSrc 以字符串的形式返回媒体地址<br>可读写的属性<br>currentTime 当前播放的时间<br>volume 音量 取值范围:0-1<br>muted 设置静音 true 静音 false 不静音<br>方法<br>play()播放<br>pause()暂停<br>音频对象的事件<br>aud.onplay &#x3D; function(){} 播放时触发<br>aud.onended &#x3D; function(){} 播放结束时触发<br>aud.onpause &#x3D; function(){} 暂停时触发<br>aud.ontimeupdate &#x3D; function(){} 播放时间变化时触发 2.视频 <video src=""></video><br>poster:视频播放前的预览图片<br>width、height :设置视频的尺寸<br>videoWidth、videoHeight:视频的实际尺寸(只读)<br>全屏<br>判断是不是全屏<br>document.isFullScreen()<br>document.webkitIsFullScreen()兼容谷歌<br>document.mozIsFullScreen()兼容火狐<br>设置全屏<br>box.requestFullScreen()<br>box.webkitRequestFullScreen()兼容谷歌<br>box.mozRequestFullScreen()兼容火狐<br>box.msRequestFullScreen()兼容 ie<br>取消全屏<br>document.cancelFullScreen()<br>document.webkitCancelFullScreen()兼容谷歌<br>document.mozCancelFullScreen()兼容火狐<br>document.msExitFullScreen()兼容 ie<br>文件读取器<br>打开文件表单的新控件 multiple 允许选择多个文件提交<br><input type="file" multiple> 1.创建文件读取器对象<br>var reader &#x3D; new FileReader(); 2.读取文件<br>reader.readAsDataURL()将文件读取为路径<br>reader.readAsText()将文件读取为文字 3.等待文件读取完毕<br>reader.onload &#x3D; function(){<br>this.result;&#x2F;&#x2F;获取读取的结果<br>}<br>H5 新标签</p><header>头部</header><article>内容</article><aside>侧边区域</aside><nav>导航</nav><section>区块</section><main>主体</main><footer>底部</footer><time>时间</time><label>称谓</label><mark>标记</mark><video>视频</video><audio>音频</audio><address>地址(默认为斜体)</address>组合标签<details open>描述文档或文档某个部分的细节</details>open属性是默认展开<dialog>一段对话</dialog><hgroup>标题</hgroup><progress>过度条</progress><summary>元素的标题</summary><datalist>input的提示列表</datalist>例:<input type="text" list="valList">    <datalist id="valList">        <option value="javascript">javascript</option>        <option value="jQuery">jQuery</option>        <option value="HTML5">HTML5</option>    </datalist><p>Canvas 画布：<br>什么是 canvas?<br>1-canvas 是 HTML5 提供的一种新标签<canvas></canvas><br>2-HTML5 <canvas>标签元素用于图形的绘制，通过脚本 (通常是 JavaScript)来完成。<br>3-<canvas>标签只是图形容器，必须使用脚本（js）来绘制图形。<br>4-Canvas 是一个矩形区域的画布，可以用 JavaScript 在上面绘画。控制其每一个像素。</p><p>canvas 默认在页面上的大小是 width:300px; height:150px;<br>是图形容器 比须使用（js）来绘制图形<br>canvas：的作用：<br>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制 2d 图像<br>Canvas 是逐像素进行渲染的。<br>画布是一个矩形区域，可以控制其每一个像素<br>canvas 拥有多种绘制矩形、路径、圆形、字符以及添加图像的方法<br>写的 3 步 cnavas：</p><p>fillStyle 属性填充颜色 这个属性是全局 要写在填充矩形上面<br>cxt.fillStyle&#x3D;‘red’</p><p>绘制矩形(实心)有二办法：<br>第一种：<br>fillRect(x,y,w,h)填充矩形(实心)默认颜色黑色<br>X,y 水平垂直坐标 w,h 矩形宽高<br>cxt.fillRect<br>第二种：<br>cxt.rect(100,100,100,100) cxt.fill()<br>strokeStyle 属性填充颜色 这个属性是全局 要写在边框矩形上面<br>cxt.strokeStyle&#x3D;‘red’</p><p>绘制矩形(空心)有二办法：<br>第一种：<br>strokeRect(x,y,w,h) 绘制一个边框矩形(空心)默认颜色黑色<br>cxt.strokeRect()<br>第二种：<br>cxt.rect(100,100,100,100) cxt.stroke()<br>beginPath() 开始绘制一个路径 每写一个图形就要写<br>cxt.beginPath();<br>save()和 restore() 第一种：要一起写类是于一个 div 包裹<br>代表 save 保存图像状态 restore 恢复图像状态</p><p>lineWidth 边框加粗<br>lineWidth&#x3D;30；</p><p>绘制多边形：<br>moveTo(x,y) 绘制路径第一个点的坐标<br>cxt.moveTo(50,300)<br>lineTo(x,y) 绘制路径其他点的坐标<br>cxt.lineTo(20,300)<br>closePath() 第一个点和最后一个点进行链接<br>clearRect(x,y,w,h) 删除一块矩形的区域<br>cxt.clearRect(0,0,oc.width,oc.hieght)</p><p>制作圆弧：<br>arc(x(圆心坐标),y(圆心坐标),r(半径),起始弧度,结束弧度,绘制方向) false 顺时针 true 逆时针<br>arc 就是确定一个圆点的二个点,0 度对应的是 3 点钟方向<br>公式<em>Math.PI&#x2F;180<br>arc(300,300,100,30</em>Math.PI&#x2F;180,60*Math.PI&#x2F;180,,false)</p><p>绘制曲线<br>arcTo(xy,xy,r)<br>第一组坐标 第二组坐标 半径</p><p>canvas 中的 2d 转换<br>translate 位移 cxt.translate(200,200);<br>设置中心 写的形状多大就是他的一半 cxt.translate(-100,-100);<br>rotate 旋转 cxt.rotate(30*Math.PI&#x2F;180) 要写公式<br>scale 缩小放大 cxt.scale(2,2)</p><p>图片预加载：<br>第一步 创建一个构造函数<br>var img&#x3D;new Image<br>第二步 给 img.src 赋值<br>img.src&#x3D;‘图片路径’<br>第三步 图片完全加载后会自动执行一事件<br>img.onload&#x3D;function(){this 就是图片完全加载后的对象}</p><p>绘制插入图片<br>cxt.drawImage(img,x,y,w,h)<br>img:当前图片 x,y 坐标 w,h 宽高</p><p>什么是预加载<br>提前加载图片，当用户需要查看时可直接从本地缓存中渲染</p><p>什么是懒加载<br>当访问一个页面的时候，先把 img 元素或是其他元素的背景图片路径替换成一张大小为 1*1px 图片的路径（这样就只需请求一次，俗称占位图）<br>只有当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来。这就是图片懒加载</p><p>canvas 设置背景：<br>createPattern(img,平铺) no-repeat 不平铺 repeat 平铺<br>repeat-x 水平平铺 repeat-y 垂直平铺</p><p>canvas 文本操作：<br>strokeText(文字,x,y) 文字边框 文字 水平 垂直</p><p>fillText(文字,x,y) 文字填充 文字 水平 垂直</p><p>font 文字大小 4 个值 样式 大小 加粗 字体<br>cxt.font&#x3D;italic 60px bold Arial</p><p>textAlign 水平方式对齐 3 个值 left right center<br>cxt.textAlign&#x3D;’center’</p><p>textBaseline 垂直方式对齐 3 个值 top bottom middle<br>cxt.textBaseline&#x3D;’top’</p><p>measureText(文字) 检查字体宽度<br>cxt.measureText().width</p><p>文字阴影<br>shadowOffsetY y 轴偏移</p><p>shadowOffsetX x 轴偏移</p><p>shadowBlur 高斯模糊值</p><p>shadowColor 阴影颜色</p><p>canvas 关于像素的操作<br>ctx.drawImage(img,x,y,w,h)在画布上画图片<br>ctx.getImageData(x,y,w,h)获取图像数据<br>x,y 表示位置 wh 表示宽高<br>属性包括 width：一行的像素个数 height：一列的个数 data：一个数组，包含 rgba 四个值，每个值都位于 0——255 之间的整数<br>ctx.putImageData(设置图像，x，y) 将图片对象数据画到画布上<br>ctx.createImageData(w,h) 创建图片对象（设置新的像素矩阵，初始值是全透明的黑色 同样会返回三个属性 width height data）<br>toDataURL() 将画布导出为图像 返回是一个字符串<br>var base&#x3D;oC.toDataURL();<br>Img.src&#x3D;base<br>这个字符串 是一个特殊的格式编码 base64 格式编码<br>base64 格式编码 1.这个格式编码可以直接被多媒体(img,video,audio)的 src 属性识别<br>2.base64 格式编码属于二进制,所以压缩性能很强,最大压缩比率达到 50%,1Mb 的图片–》500K 左右 有损压缩,会降低图片的质量 3.将图片转成 base64 格式编码 会比原有图片体积要大,大三分之一左右 10mb 图片—》13mb base64 压缩一半》7,5mb<br>前端性能优化法案之一:<br>图片转成 base64 格式编码,好处:减少 http 请求<br>缺点:加载 css 时间会变慢一点</p><p>cdn 托管（这个没有讲）<br>Svg<br>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）</p><p>什么是 svg：<br>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准</p><p>xml 使用规范（基本语法）<br>1.xml 文档的后缀名必须为.xml<br>2.xml 第一行必须定义为文档声明<br>3.xml 文档中有且仅有一个根标签【就是只能有一个根标签】 4.属性值必须使用双引号或单引号引起来 5.标签必须是有开始和有结束的<br>6.xml 是区分大小写的</p><p>xmlns 命名空间：属性值这个网址是一套规则  ，这个规则里定义了 xmlns&#x3D;‘<a href="http://www.w3.org/2000/svg%E2%80%99">http://www.w3.org/2000/svg’</a><br>含义：规定标签的作用</p><p>circle(cx,cy,r) 圆形<br>cx(圆心水平方向坐标) cy(圆心垂直方向坐标) r（半径）<br>fill(填充颜色) storke(边框颜色) storke-width(边框宽度) transparent&#x2F;none(透明)</p><p>rect(width,height,x,y,)矩形<br>width(矩形宽度) height(矩形高度)<br>x(水平方向坐标) y(垂直方向坐标)<br>rx（矩形圆角的弧度水平方向上的半径） ry（矩形圆角的弧度垂直方向的半径）</p><p>line(x1,y1,x2,y2)线段<br>x1(起始点的水平方向坐标) y1(起始点的垂直方向坐标)<br>x2(终点的水平方向坐标) y2(终点的垂直方向坐标)<br>storke-opacity(线段颜色的透明度)</p><p>svg 引入有三种：<br>第一种:<img src=’路径地址’><br>第二种:<iframe src=’路径地址’ frameborder=’0’></iframe><br>第三种:直接使用 svg 标签</p><div><svg xmlns=’http://www.w3.org/2000/svg’></svg></div>g标签 类是一个div公有属性可以实现  fill stroke  stroke-width  stroke-opacity(none/transparent)transform：translate(300,300)<p>g 标签表示分组的意思,g 标签可以理解为将里面所有的子标签当做一个整体,g 标签中定义的属性,会被里面子标签继承 属性是有限制的<br>只有公有属性才能被定义到 g 标签中,可以给 g 标签加一个 id 或者 class,操作 g 标签,就等于操作了里面所有子标签</p><p>polyline (points 水平 垂直 坐标) 标签用于绘制一根折线，水平坐标与垂直坐标之间用逗号分隔，点与点之间用空格分隔<br>&lt;polyline points&#x3D;’50,50 300,150 175,300’&gt;</p><p>polygon (points 水平 垂直 坐标) 标签用于绘制多边形(线连接一起)<br>&lt;polygon points&#x3D;’50,50 300,150 175,300’&gt;</p><p>ellipse(cx cy rx ry)标签用于绘制椭圆，cx 和 cy 属性指定了椭圆中心的水平坐标和垂直坐标,rx 和 ry 属性指定了椭圆的水平半径和垂直半径<br>path 用于绘制路径 path 表示路径有一个 d 属性 属性中<br>M 大写的 M 表示绘制第一个点跟 canvas.moveTo(x,y)效果一样<br>L 表示绘制其他的点 跟 canvas.lineTo(x,y)效果一样<br>Z 表示闭合路径 和 canvas.closePath()效果一样</p><p>text(text-anchor&#x3D;’middle’) text-anchor 水平居中 标签 元素内部可以放任何的文字</p><p>在 SVG 中有两种截然不同的文本模式. 一种是写在图像中的文本，另一种是 SVG 字体，现在我们主要集中前者：写在图像中的文本。</p><p>image(x,y,width,height xlink:href)<br>X&#x2F;y 水平垂直 width&#x2F;height 大小 xlink:href&#x3D;’图片路径’标签</p><p>use(x,y,href)标签用于复制一个形状<br>href 属性指定索要复制的节点<br>X&#x2F;y 属性为水平和垂直方向的坐标<br><use href=’#1’ x=’50’ y=’50’></use><br>defs 标签 需要再次使用的引用元素定义在 defs 元素里面在 defs 元素中定义的图形元素不会直接呈现利用 <use>元素呈现这些元素</p><p>本地存储<br>将数据保存到本地主机的硬盘里<br>本地存储的含义:浏览器里 将一些所需要的数据保存到电脑硬盘里的 一种方式<br>cookie 1.需要服务器环境 才能运行 2.存储数据的格式为 key &#x3D; val(键值对) 字符串 3.默认为临时存储 关闭浏览器数据自动删除 可以设置存储时间(保质期) 4.存储数据的大小为 4KB<br> 5.同源(同端口,同域名,同协议)的数据可以共享<br>localStorage 永久存储 1.不需要服务器环境 就能运行 在浏览器就能用 2.存储数据的格式为 字符串(json 字符串) 3.默认为永久存储 只能手动删除 数据才能删除 4.存储数据的大小为 5MB 5.同源(同端口,同域名,同协议)的数据可以共享<br>sessionStorage 临时存储 1.不需要服务器环境 就能运行 在浏览器就能用 2.存储数据的格式为 字符串(json 字符串) 3.默认为永久存储 浏览器或页面关闭 数据自动删除 4.存储数据的大小为 5MB 5.同页面的数据可以共享<br>JSON.stringify()将 js 对象转为字符串对象<br>JSON.parse()将字符串对象转为 js 对象</p><p>Cookie<br>数据的生命周期: 一般由服务器生成，可设置失效时间。如果在浏览器端生成 Cookie，默认是关闭浏览器后失效<br>存放数据大小 4K 左右<br>与服务器端通信 每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题<br>localStorage<br>数据的生命周期： 除非被清除，否则永久保存<br>存放数据大小 一般为 5MB 左右<br>与服务器端通信 仅在客户端（即浏览器）中保存，不参与和服务器的通信<br>sessionStorage<br>数据的生命周期: 仅在当前会话下有效，关闭页面或浏览器后被清除<br>存放数据大小 一般为 5MB 左右<br>与服务器端通信 仅在客户端（即浏览器）中保存，不参与和服务器的通信</p><p>getItem(读取内容) 获取数据<br>setItem(存储内容) 设置存储数据<br>removeItem() 删除键值对 key 的存储内容<br>clear()清空所有存储内容</p>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/17/hello-world/"/>
    <url>/2022/11/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>常用的 hexo<br>常见命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至 public 目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口 4000，&#x27;ctrl + c&#x27;关闭 server）</span><br>hexo deploy <span class="hljs-meta">#部署到 GitHub</span><br>hexo help <span class="hljs-meta"># 查看帮助</span><br>hexo version <span class="hljs-meta">#查看 Hexo 的版本</span><br></code></pre></td></tr></table></figure><p>缩写</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deploy<br><br></code></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> s -g <span class="hljs-comment">#生成并本地预览</span><br>hexo d -g <span class="hljs-comment">#生成并上传</span><br></code></pre></td></tr></table></figure><p>书写完整格式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">postName</span> <span class="hljs-comment">#文章页面上的显示名称，一般是中文</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013-12-02 15:30:16</span> <span class="hljs-comment">#文章生成时间，一般不改，当然也可以任意修改</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">默认分类</span> <span class="hljs-comment">#分类</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">tag1</span>, <span class="hljs-string">tag2</span>, <span class="hljs-string">tag3</span>] <span class="hljs-comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">附加一段文章摘要，字数最好在</span> <span class="hljs-number">140</span> <span class="hljs-string">字以内，会出现在</span> <span class="hljs-string">meta</span> <span class="hljs-string">的</span> <span class="hljs-string">description</span> <span class="hljs-string">里面</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">以下是正文</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/17/hello-world%20copy/"/>
    <url>/2022/11/17/hello-world%20copy/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>常用的 hexo<br>常见命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至 public 目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口 4000，&#x27;ctrl + c&#x27;关闭 server）</span><br>hexo deploy <span class="hljs-meta">#部署到 GitHub</span><br>hexo help <span class="hljs-meta"># 查看帮助</span><br>hexo version <span class="hljs-meta">#查看 Hexo 的版本</span><br></code></pre></td></tr></table></figure><p>缩写</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deploy<br><br></code></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> s -g <span class="hljs-comment">#生成并本地预览</span><br>hexo d -g <span class="hljs-comment">#生成并上传</span><br></code></pre></td></tr></table></figure><p>书写完整格式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">postName</span> <span class="hljs-comment">#文章页面上的显示名称，一般是中文</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013-12-02 15:30:16</span> <span class="hljs-comment">#文章生成时间，一般不改，当然也可以任意修改</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">默认分类</span> <span class="hljs-comment">#分类</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">tag1</span>, <span class="hljs-string">tag2</span>, <span class="hljs-string">tag3</span>] <span class="hljs-comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">附加一段文章摘要，字数最好在</span> <span class="hljs-number">140</span> <span class="hljs-string">字以内，会出现在</span> <span class="hljs-string">meta</span> <span class="hljs-string">的</span> <span class="hljs-string">description</span> <span class="hljs-string">里面</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">以下是正文</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS知识点</title>
    <link href="/2022/11/17/css%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/11/17/css%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是CSS？"><a href="#什么是CSS？" class="headerlink" title="什么是CSS？"></a>什么是CSS？</h3><p>层叠样式表（Cascading Style Sheets），是一种用于描述网页样式和布局的标记语言。它与HTML（超文本标记语言）一起使用，通过将样式应用于HTML 元素，控制网页的外观和风格。</p><h3 id="设置网页图标路径"><a href="#设置网页图标路径" class="headerlink" title="设置网页图标路径"></a>设置网页图标路径</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.ico&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="插入样式表的三种方式"><a href="#插入样式表的三种方式" class="headerlink" title="插入样式表的三种方式"></a>插入样式表的三种方式</h3><ul><li><h5 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h5></li></ul><p>在html中，使用link标签引入外部样式，link是一个单标签，写在head标签中。</p><p>在link标签中必须有两个属性，href属性用于设置css文件路径，rel属性用于指明引入文件和html文件的关系，属性值stylesheet</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;111.css新建的CSS页面样式保存路径&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h5></li></ul><p>内部样式表写在style标签中，style标签写在head标签中</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"><span class="hljs-selector-tag">h2</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="内联样式表-行内样式表"><a href="#内联样式表-行内样式表" class="headerlink" title="内联样式表(行内样式表)"></a>内联样式表(行内样式表)</h5></li></ul><p>写在标签行内中的style的属性中，此种样式效果不常用，因为css的目的就是为了结构样式分离，但是行内样式并没有实现。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：行内标签有上下左右内边距和左右外边距，上下内边距会覆盖上方原有的元素，内容与父元素内边框重合</p><ul><li><p>基础选择器</p><ul><li><p>通配符选择器：选中页面中的所有元素，写法是{}</p></li><li><p>标签选择器：选择页面中有相同标签的元素，写法是 “标签名{}”</p></li></ul></li></ul><p>​例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>类选择器：选择页面中有相同类名的元素，在标签中的class属性用于设置标签的类名，属性值可以随意设置，写法是 “.类名{}”</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.a1</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>id选择器：选择页面中id名字与id选择器名称相同的的页面元素，id名就id属性的属性值，id选择器写法是“#id名”，id属性值在页面中具有唯一性</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">#”a1”&#123;<span class="hljs-attribute">color</span>:red;&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>复合选择器&#x2F;群组选择器：多个选择器以逗号链接，可以选中多个选择器，设置样式</li></ul><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">b</span>&#123;<span class="hljs-attribute">color</span>:yellow;&#125;<br></code></pre></td></tr></table></figure><ul><li>后代选择器：多个选择器用空格链接，但是链接的选择器必须有嵌套关系</li></ul><p>​          例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">b</span> <span class="hljs-selector-class">.a1</span>&#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><ul><li>子元素选择器：多个选择器用“&gt;”链接，这种连接必须是父级子级的关系</li></ul><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">b</span>&#123;<span class="hljs-attribute">color</span>:yellow;&#125;<br></code></pre></td></tr></table></figure><h3 id="选择器优先级的解释："><a href="#选择器优先级的解释：" class="headerlink" title="选择器优先级的解释："></a>选择器优先级的解释：</h3><p>当多个选择器同时选中一个网页元素时，需要考虑优先级的问题，谁的优先级高谁就会最终显示，优先级有三种原则</p><blockquote><p>就近原则：相同的选择器，后出现的会覆盖先出现的</p><p>具体原则：选择器更具体优先级更高，由高到低分别是id，类，标签和通配符</p><p>重要原则：在任意的属性后加“ !Important ”，那么这条属性优先级最高</p></blockquote><p>​     </p><h3 id="css一些基本的样式设置"><a href="#css一些基本的样式设置" class="headerlink" title="css一些基本的样式设置"></a>css一些基本的样式设置</h3><ul><li><p>CSS 文本样式设置</p><blockquote><p>color:red;设置文字颜色为红色</p><p>font-style:italic(倾斜)&#x2F;oblique(倾斜等同italic)&#x2F;normal(取消倾斜); 设置字体倾斜效果 </p><p>font-variant:small-caps或normal; 设置小写字母的小型大写形式或字母正常显示  </p><p>font-weight:bold或normal; 设置文字加粗或不加粗                    </p><p>font-size:1px; 设置文字大小，默认为16px </p><p>注：换行会出现空白节点，其继承父元素的font-size属性，会导致子元素出现间隔效果</p><p>解决方法：给父级设置font-size:0或者标签不换行 </p><p>font-family:”幼圆”,”宋体”,”仿宋”; 设置文字字体</p><p>line-height:1px; 设置文字行高属性</p><p>注：font的缩写复合模式内必须同时拥有font-family和font-size两个属性值</p><p>复合式整体写法：italic small-caps bold 20px&#x2F;20px font-family:”字体”;</p><p>符合写法内没有字体颜色。</p><p>text-transform:lowercase或uppercase; 文字以小写或以大写的形式显示</p><p>text-decoration:none; 设置文字没有装饰线（默认显示没有）</p><p>text-decoration:underline; 设置文字下划线（a标签自带下划线） </p><p>text-decoration:line-through; 设置中间线（删除线）</p><p>text-decoration:overline; 设置上划线     </p></blockquote></li><li><p>段落样式</p><blockquote><p>text-indent:2em; 首行缩进两个字符</p><p>text-align:left或center或right或justify(文字两端对齐); 设置文字的对齐方式   </p><p>letter-spacing:10px; 设置汉字字符间距</p><p>word-spacing:10px; 设置英文字母间距</p></blockquote></li><li><p>背景样式</p><blockquote><p>background-color:red; 设置背景颜色（所有的标签&#x2F;网页元素都有背景颜色）</p><p>background-image:url(图片路径); 设置背景图片</p><p>background-repeat:repeat&#x2F;no-repeat&#x2F;repeat-x&#x2F;repeat-y; 设置背景图片重复&#x2F;不重复&#x2F;横向重复&#x2F;纵向重复</p><p>background-position:center; 设置背景图片X&#x2F;Y轴都居中。其余情况先写x轴再写y轴，空格隔开。可以用数值PX&#x2F;百分比表示。</p><p>background-attachment:scroll或fixed; 设置背景图片在元素中不跟随页面滚动或跟随页面滚动</p><p>background-size:20px 20px; 背景图片的大小数值，先写水平数值再写垂直数值.</p><p>background的复合属性语法：background:颜色 图片 重复 定位 滚动</p><p>背景颜色透明度的第一种方法：opacity:0.5; 元素透明度效果</p><p>背景颜色透明度的第二种方法：background-color:rgba(R,G,B,A);</p></blockquote></li><li><p>列表样式表</p><blockquote><p>list-style-type:none; 取消列表项样式（可用none、disc、circle、square）</p><p>list-style-type:decimal; 有序列表左侧显示形式“1，2，3”</p><p>list-style-type:lower-roman; 有序列表的小写罗马显示形式“i ii iii” </p><p>list-style-type:upper-roman; 有序列表的大写罗马显示形式“I II III”</p><p>list-style-type:lower-alpha; 有序列表的小写英文字母显示形式“a,b,c”</p><p>list-style-type:upper-alpha; 有序列表的大写英文字母显示形式“A,B,C”</p><p>list-style-position:inside&#x2F;outside; 定位列表样式符号在行内&#x2F;行外</p><p>list-style-image:url(图片路径); 可以设置图片为列表项样式</p><p>复合属性语法：list-style:type&#x2F;position&#x2F;image;</p></blockquote></li><li><p>链接属性四种状态样式</p><ul><li><p>（第一顺序）a:link：鼠标未选定的默认样式</p></li><li><p>例：</p></li><li><pre><code class="html">&lt;style&gt;选择器:link&#123;&#125;&lt;/style&gt;<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">  </span><br><span class="language-xml">* （第二顺序）a:visited：已跳转过的链接样式</span><br><span class="language-xml"></span><br><span class="language-xml">* 例：</span><br><span class="language-xml"></span><br><span class="language-xml">* ```html</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">选择器<span class="hljs-selector-pseudo">:visited</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>（第三顺序）a:hover：鼠标移入时的元素样式(所有的标签都有鼠标移入的状态)</p></li><li><p>例：鼠标移入时显示元素</p></li><li><p>&#96;&#96;&#96;css<br>.img2{display:none;}</p><p>div:hover .img2{display:block;}</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">* （第四顺序）a:active：鼠标按下时的元素样式</span><br><span class="language-xml"></span><br><span class="language-xml">* 例：</span><br><span class="language-xml"></span><br><span class="language-xml">* ```html</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">选择器<span class="hljs-selector-pseudo">:active</span></span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>表格样式</p><blockquote><p> border-collapse:collapse; 设置单元格边框和表格边框合并在一起</p><p>border-spacing:水平值 垂直值; 设置相邻单元格的间距</p><p>vertical-align:top或middle或bottom; 表格内文字垂直对齐方式，middle(居中)</p><p>例：解决图片底部有空白区域的问题</p><p>img{vertical-align:middle;}</p><p>overflow:hidden; 将超出盒子的内容隐藏</p><p>overflow:scroll; 盒子添加一个滚动条，可以通过拉动滚动条来查看超出盒子的内容</p><p>overflow:auto; 当盒子内容超出盒子时添加滚动条</p></blockquote></li><li><p>表单文本框样式</p><blockquote><p>outline:none; 设置选中表单控件后，边框为无。</p><p>outline:1px solid red; 设置选中文本框后，边框样式为红色的实线</p><p>边框样式</p><p>border-width:1px; 设置边框粗细数值</p><p>border-style:solid&#x2F;dotted&#x2F;dashed&#x2F;double; 设置边框线样式为实线&#x2F;点状线&#x2F;虚线&#x2F;双实线</p><p>border-color:red; 设置边框颜色</p><p>复合写法：border:1px solid red;</p><p>border-top&#x2F;border-right&#x2F;border-bottom&#x2F;border-left：上&#x2F;右&#x2F;下&#x2F;左边框</p><p>例：利用边框实线属性设置红色三角形样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<br><br><span class="hljs-attribute">width</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<br><br><span class="hljs-attribute">border-top</span>:<span class="hljs-number">20px</span> solid red;<br><br><span class="hljs-attribute">border-right</span>:<span class="hljs-number">20px</span> solid tansparent;<br><br><span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">20px</span> solid transparent;<br><br><span class="hljs-attribute">border-left</span>:<span class="hljs-number">20px</span> solid transparent;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>设置边框圆角样式</p><p>水平值和垂直值相同时的圆角边设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左) <span class="hljs-built_in">b</span>(上右) <span class="hljs-built_in">c</span>(下右) <span class="hljs-built_in">d</span>(下左); <br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左) <span class="hljs-built_in">b</span>(上右和下左) <span class="hljs-built_in">c</span>(下右);<br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左和下右) <span class="hljs-built_in">b</span>(上右和下左) ;<br><br><span class="hljs-attribute">border-top-left-radius</span>:a; 设置左上角数值<br><br><span class="hljs-attribute">border-top-right-radius</span>:a; 设置右上角数值<br><br><span class="hljs-attribute">border-bottom-right-radius</span>:a; 设置右下角数值<br><br><span class="hljs-attribute">border</span><span class="hljs-attr">--bottom-left-radius</span>:a; 设置左下角数值<br><br>水平值与垂直值不相等的圆角边设置<br><br><span class="hljs-attribute">border</span>-redius:”上” ”右” ”下” ”左”/”上” ”右” ”下” ”左”;<br><br>注：/ 左侧为水平圆角值，右侧为垂直原教值<br></code></pre></td></tr></table></figure></blockquote></li><li><p>内边距样式</p></li></ul><blockquote><p>作用：用来调整子元素在父元素中的位置关系。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding-top</span>/<span class="hljs-attribute">padding-right</span>/<span class="hljs-attribute">padding-bottom</span>/<span class="hljs-attribute">padding-left</span>：上/右/下/左内边距(内边距也叫做补白)<br><br>复合语法：<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>；<br><br>注：padding属性需要添加在父元素上。<br></code></pre></td></tr></table></figure><ul><li>外边距样式</li></ul><blockquote><p>作用：用来控制盒子之间的空隙</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span>/<span class="hljs-attribute">margin-right</span>/<span class="hljs-attribute">margin-bottom</span>/<span class="hljs-attribute">margin-left</span>：上/右/下/左外边距(外边距也叫做延白)<br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;这条代码的作用是设置块元素在父级元素内居中。auto是设置左右两边的数值自动相同，也就是居中。<br><br>复合语法：<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>；<br><br>注：外边距折叠现象，当一个盒子位于另一个盒子的上方，就会出现外边距折叠现象，也就是说相连的这两个外边距中，数值较大的一个会生效<br></code></pre></td></tr></table></figure><ul><li>关于一些margin和padding的问题及解决方法</li></ul><blockquote><p> 父级标签中使用overflow:hidden;就可以解决外边距重叠</p><p>父级设置一个上边框也会解决外边距重叠(margin塌陷问题)、</p></blockquote><p>说明：设置角度的值中 padding、margin的方法相同</p><p>1.当一个值时四个值一样。</p><p>2.两个值是上下值和左右值。</p><p>3.三个值时，第一个为上值，第二个值为左右值，第三个为下值。</p><p>4.四个值时一次对应上右下左四个值。</p><ul><li>元素状态样式</li></ul><blockquote><p> visibility:hidden; 设置元素隐藏，在页面中占据空间</p><p>visibility:visible; 设置元素不隐藏(默认值)</p><p>display:none; 设置元素在页面中消失，不会在页面中占据空间</p><p>display:block; 将元素标签转变为块元素标签（可设置宽高和内外边距，独占一行，由上而下排列）</p><p>display:inline; 将元素标签转换为行内元素（可在同一行显示，可设置边距，但不建议使用）<br>     display:inline-block; 将元素标签转换为行内块元素（可以在同一行显示，也具备块元素的特性，img是行内块元素） </p></blockquote><ul><li>元素浮动样式：无论什么浮动元素都是行内块元素</li></ul><blockquote><p> float:left或right;向左浮动或向右浮动。</p><p>（1）利用浮动float属性，可以将块元素、行内块元素、行内元素设置在同一行显示</p><p>（2）将元素在它的父元素里尽可能的向左（float :left;）或向右排列（float :right;）</p><p>（3）元素浮动时，直到它的边缘碰到父元 素的边框或者另一个浮动元素为止</p><p>（4）元素浮动后，会脱离文档流，不占据空间，无法将父元素撑开，如果父元素没有高会造成父元素的塌陷，解决办法是清浮动</p></blockquote><h5 id="清浮动的解决办法"><a href="#清浮动的解决办法" class="headerlink" title="清浮动的解决办法"></a>清浮动的解决办法</h5><p><strong>1.万能清浮动</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*在父级元素上设置一个伪类选择器，在其末尾加一个空标签。*/</span><br><br>选择器<span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:””;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">clear</span>:both;&#125;：<span class="hljs-comment">/*此内容为必须项*/</span><br><br><span class="hljs-selector-class">.clearFloat</span><span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:””;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">visibility</span>:hidden;<span class="hljs-attribute">clear</span>:both;&#125;：<span class="hljs-comment">/*此内容为万能请浮动的全部属性代码*/</span><br><br>注：选择器<span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:”内容”;&#125;；在子元素末尾添加一个内容为空的元素用于撑开父元素 ，防止父元素塌陷 <br></code></pre></td></tr></table></figure><p><strong>2.子元素块标签</strong></p><p>原理：通过设置一个内容为空的块级子元素盒子实现清浮动效果，来限制父级元素的高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在子元素末尾添加一个空的块标签，并设置style=”clear:both;属性，可以清浮动 --&gt;</span> <br>&lt;style=”clear:both;”&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">子元素块标签</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.给父级设置高</strong></p><p><strong>4.给父级设置overflow:hidden;</strong></p><p><strong>5.父级同样拥有浮动属性</strong></p><p><strong>6..clearFloat:after{zoom:1;}(这个效果可以解决IE69版本的清浮动)</strong></p><ul><li>定位样式:</li></ul><blockquote><p>**position:static; **</p><p>普通文档流，默认值，无特殊定位，处于文档流中，</p><p>作用：可以快速取消定位</p><p>**position:relative; **</p><p><strong>相对定位，处于文档流中，元素仍然占据原来的位置</strong></p><p>移动方向：向上top，向下bottom，向左left，向右right</p><p>说明：元素没有发生移动时等同于文档流效果相同</p><p>当元素发生移动时，原理是当前元素隐身，创建一个新的脱离文档流的元素基于当前元素的位置进行偏移，此时不会影响其余元素的位置</p><p><strong>position:absolute;</strong></p><p> <strong>绝对定位</strong></p><p>（1）脱离文档流，不会占据原本文档流的空间位置，不能将没有定位属性的父元素撑开</p><p>（2）会改变元素本身属性，转换为行内块元素，让行内元素支持设置宽高，块元素支持宽度由内容撑开</p><p>（3）定位原点：如果有定位父级(relative&#x2F;absolute)相对于定位父级发生偏移，没有定位父级相对于整个body元素发生偏移；</p><p>（4）移动方向：向上top，向下bottom，向左left，向右right</p><p>（5）当前元素如果没有设置宽高，那么他的宽高会由他本身的内容撑开</p><p>**position:fixed; **</p><p><strong>固定定位</strong></p><p>（1）脱离文档流，不会占据空间位置，不能将父元素撑开</p><p>（2）定位原点：相对于浏览器窗口定位</p><p>（3）固定定位元素，不会随着滚动条滚动而改变他在可视窗口的位置</p><p>（4）移动方向：向上top，向下bottom，向左left，向右right</p><p>（5）IE6不支持（兼容性问题），用JS解决</p></blockquote><ul><li>z-index:数值;脱离文档流的层级设置，也就是说谁在最上边显示</li></ul><blockquote><p>说明：数值越大，层级越靠前，较大数值的元素会覆盖在较小数值的元素之上，此属性作用于absolute或fixed 的元素</p></blockquote><p>设置鼠标指针样式</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"> /设置鼠标移入时自定义鼠标样式/<br><br>选择器<span class="hljs-selector-pseudo">:hover</span>&#123;<br><br><span class="hljs-attribute">cursor</span>:crosshair;<br><br><span class="hljs-attribute">cursor</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">img/鼠标样式.ico</span>),pointerl<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注：设置鼠标样式为图片时，图片必须时以 .ico 为后缀名的33X33像素的特殊图片</p><ul><li>其他样式选择</li></ul><blockquote><p>cursor: default; 默认光标(通常是一个箭头)</p><p>cursor: auto; 浏览器默认设置的光标</p><p>cursor: crosshair; 光标呈现为十字线</p><p>cursor: pointer; 光标呈现为指示链接的指针(一只手)</p><p>cursor: text; 使用文本输入指针样式</p><p>cursor: grab; 使用可调整大小指针样式</p></blockquote><h1 id="树状图总结："><a href="#树状图总结：" class="headerlink" title="树状图总结："></a>树状图总结：</h1><p><img src="https://github.com/aarnoo/aarnoo.github.io/blob/master/img/cssszt1.png?raw=true" alt="0251aa7cb441af16a7ccb3e821fe86e"></p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css,笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语义化标签</title>
    <link href="/2022/11/17/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/11/17/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-HTML-语义化标签？"><a href="#什么是-HTML-语义化标签？" class="headerlink" title="什么是 HTML 语义化标签？"></a>什么是 HTML 语义化标签？</h2><h4 id="语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。"><a href="#语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。" class="headerlink" title="语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。"></a>语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。</h4><h2 id="为什么要用-H5-语义化标签？"><a href="#为什么要用-H5-语义化标签？" class="headerlink" title="为什么要用 H5 语义化标签？"></a>为什么要用 H5 语义化标签？</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="DIV-标签本身就是一个容器，并没有独特的含义，当大量使用-div-会使文档结构不够清晰，同时影响对页面的读取"><a href="#DIV-标签本身就是一个容器，并没有独特的含义，当大量使用-div-会使文档结构不够清晰，同时影响对页面的读取" class="headerlink" title="DIV 标签本身就是一个容器，并没有独特的含义，当大量使用 div 会使文档结构不够清晰，同时影响对页面的读取"></a>DIV 标签本身就是一个容器，并没有独特的含义，当大量使用 div 会使文档结构不够清晰，同时影响对页面的读取</h4><h4 id="在没有-CSS-的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。"><a href="#在没有-CSS-的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。" class="headerlink" title="在没有 CSS 的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。"></a>在没有 CSS 的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 网页头部标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>网页导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 章节区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>        内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 主要内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 主体 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 章节 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 侧边区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>网页尾部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多媒体标签的属性</title>
    <link href="/2022/11/17/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/11/17/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="多媒体标签的属性"><a href="#多媒体标签的属性" class="headerlink" title="多媒体标签的属性"></a>多媒体标签的属性</h1><h2 id="html"><a href="#html" class="headerlink" title="html:"></a>html:</h2><h3 id="音频标签："><a href="#音频标签：" class="headerlink" title="音频标签："></a>音频标签：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>    标签属性:<br>    autoplay    自动播放<br>    controls    显示控件<br>    loop        循环播放<br><br></code></pre></td></tr></table></figure><h3 id="视频标签："><a href="#视频标签：" class="headerlink" title="视频标签："></a>视频标签：</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">&lt;video&gt;&lt;/video&gt;<br>autoplay    自动播放<br>controls    显示控件<br>loop        循环播放<br><br><span class="hljs-section">特有属性:poster 视频预览图片</span><br><span class="hljs-section">width:设置宽</span><br><span class="hljs-section">height:设置高</span><br><br></code></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js:"></a>js:</h2><h3 id="音频对象"><a href="#音频对象" class="headerlink" title="音频对象:"></a>音频对象:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 获取音频<br>var aud=document.querySelector(<span class="hljs-string">&#x27;audio&#x27;</span>)<br><span class="hljs-regexp">//</span> 获取视频<br>var vid=document.querySelector(<span class="hljs-string">&#x27;video&#x27;</span>)<br><br><span class="hljs-regexp">//</span> 对象属性<br><span class="hljs-regexp">//</span> 只读属性：<br>aud.duration  <span class="hljs-regexp">//</span>音频的总时间  (只读属性) 未加载音频时为NAN<br>aud.paused  <span class="hljs-regexp">//</span>媒体是否暂停    返回布尔值true或flase  (只读属性)<br>aud.ended    <span class="hljs-regexp">//</span>是否播放结束 返回布尔值true或flase  (只读属性)<br><br><span class="hljs-regexp">//</span> 可修改属性:<br>aud.muted         <span class="hljs-regexp">//</span>读取、设置静音 true/false<br>aud.currentTime   <span class="hljs-regexp">//</span>读取、设置当前播放的时间<br>aud.volume        <span class="hljs-regexp">//</span>读取、设置音量大小 <span class="hljs-number">0</span>~<span class="hljs-number">1</span><br><br><span class="hljs-regexp">//</span> 对象的方法：(参数，返回值)<br>aud.play()        <span class="hljs-regexp">//</span>播放的方法<br>aud.pause()       <span class="hljs-regexp">//</span>暂停的方法<br><br><span class="hljs-regexp">//</span> 事件 DOM 对象的属性：<br>aud.oncanplay=<span class="hljs-keyword">function</span>()&#123;&#125;      <span class="hljs-regexp">//</span>加载完毕后允许播放时触发<br>aud.onpause=<span class="hljs-keyword">function</span>()&#123;&#125;        <span class="hljs-regexp">//</span>暂停时触发<br>aud.onplay=<span class="hljs-keyword">function</span>()&#123;&#125;         <span class="hljs-regexp">//</span>播放开始时触发<br>aud.onended=<span class="hljs-keyword">function</span>()&#123;&#125;        <span class="hljs-regexp">//</span>播放结束时触发<br>aud.ontimeupdate=<span class="hljs-keyword">function</span>()&#123;&#125;   <span class="hljs-regexp">//</span>播放中触发<br><br><span class="hljs-regexp">//</span> 自定义属性：<br>aud.tt<br>aud.timer<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解jQuery</title>
    <link href="/2022/11/17/%E4%BA%86%E8%A7%A3jQ/"/>
    <url>/2022/11/17/%E4%BA%86%E8%A7%A3jQ/</url>
    
    <content type="html"><![CDATA[<h3 id="jQuery-是什么"><a href="#jQuery-是什么" class="headerlink" title="jQuery 是什么"></a>jQuery 是什么</h3><p>jQuery 是目前使用最广泛的 javascript 函数库。据统计，全世界排名前 100 万的网站，有 46% 使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。对于网页 开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习 更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。<br>jQuery 是一个快速、简洁的 JavaScript 框架，可以简化查询 DOM 操作、事件处理、制作动 画和 Ajax 交互<br>jQuery 设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。<br>2006 年 1 月，John Resig 发布了第一个版本。</p><h2 id="jQuery-特点"><a href="#jQuery-特点" class="headerlink" title="jQuery 特点"></a>jQuery 特点</h2><p><strong>轻量级的 JS 函数库</strong><br><strong>丰富的 DOM 选择器</strong><br><strong>链式表达式：可以把多个操作写在一行代码里，更为简洁。</strong><br><strong>时间，样式，动画支持</strong><br><strong>Ajax 操作支持</strong><br><strong>跨浏览器兼容</strong><br><strong>插件扩展开发：有着丰富的第三方插件，如：树形菜单，日期控件，图片切 换插件，弹出窗口等等</strong><br>jQuery 主要解决了两大问题: （1）它提供了一整套简洁的 API 用于操作 Dom。<br>（2）它抹平了不同浏览器的差异<br>API：英文全称 Application Programming Interface，翻译为“应用程序编程接口”。是一些预 先定义的函数<br>jQuery 下载地址：<a href="http://www.jq22.com/jquery-info122">http://www.jq22.com/jquery-info122</a>此网站有不同版本的 jq 可供下载使用<br>使用版本注意<br>1.x 兼容 ie678，使用最为广泛，官方只做 BUG 维护，功能不再新增。最终版本：1.12.4 (2016 年 5 月 20 日)<br>2.x 不兼容 ie678，官方只做 BUG 维护，功能不再新增。如果不考虑兼容低版本的浏览 器可以使用 2.x，最终版本：2.2.4 (2016 年 5 月 20 日)<br>3.x 不兼容 ie678，只支持最新的浏览器。除非特殊要求，一般不会使用 3.x 版本，很多 老的 jQuery 插件不支持这个版本。目前该版本是官方主要更新维护的版本。<br>查看 JQuery 的版本：控制台输出 $.fn.jquery 会返回当前的版本号<br>查看是否成功引入：控制台输出 $&#x3D;&#x3D;&#x3D;jQuery 返回 true 表示成功引入</p><h2 id="文档就绪事件："><a href="#文档就绪事件：" class="headerlink" title="文档就绪事件："></a>文档就绪事件：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//原生js：</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><br><span class="hljs-comment">// jQuery：</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;jquery 代码&#125;)<br><br><span class="hljs-comment">// 简写：</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;jquery 代码&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// DOM 加载完毕后就执行，不必等到整个网页资源加载完毕可以同时执行多个</span><br>$(<span class="hljs-variable language_">document</span>) .<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br><span class="hljs-comment">// 必须等到页面内包括图片的所有元素和资源加载完毕后才能执行</span><br><span class="hljs-variable language_">window</span>. onload = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="注：不能同时执行多个，如果有多个-window-onload-方法，只会其中执行一个选择器是-jQuery-的根基，在-jQuery-中，对事件处理、遍历-DOM-以及-ajax-操作都依赖于选-择器。jQuery-选择器完全继承了-CSS-的风格，两者的写法十分相似，只不过两者的作用-效果不同。CSS-选择器找到元素后添加样式，而-jQuery-选择器找到元素后添加行为。"><a href="#注：不能同时执行多个，如果有多个-window-onload-方法，只会其中执行一个选择器是-jQuery-的根基，在-jQuery-中，对事件处理、遍历-DOM-以及-ajax-操作都依赖于选-择器。jQuery-选择器完全继承了-CSS-的风格，两者的写法十分相似，只不过两者的作用-效果不同。CSS-选择器找到元素后添加样式，而-jQuery-选择器找到元素后添加行为。" class="headerlink" title="注：不能同时执行多个，如果有多个 window.onload 方法，只会其中执行一个选择器是 jQuery 的根基，在 jQuery 中，对事件处理、遍历 DOM 以及 ajax 操作都依赖于选 择器。jQuery 选择器完全继承了 CSS 的风格，两者的写法十分相似，只不过两者的作用 效果不同。CSS 选择器找到元素后添加样式，而 jQuery 选择器找到元素后添加行为。"></a>注：不能同时执行多个，如果有多个 window.onload 方法，只会其中执行一个选择器是 jQuery 的根基，在 jQuery 中，对事件处理、遍历 DOM 以及 ajax 操作都依赖于选 择器。jQuery 选择器完全继承了 CSS 的风格，两者的写法十分相似，只不过两者的作用 效果不同。CSS 选择器找到元素后添加样式，而 jQuery 选择器找到元素后添加行为。</h5>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery,笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

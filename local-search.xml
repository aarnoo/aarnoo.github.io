<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS3 知识点</title>
    <link href="/2023/08/29/css3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/08/29/css3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS3-知识点"><a href="#CSS3-知识点" class="headerlink" title="CSS3 知识点"></a>CSS3 知识点</h1><h3 id="CSS3-概述："><a href="#CSS3-概述：" class="headerlink" title="CSS3 概述："></a>CSS3 概述：</h3><p>CSS3 是 CSS2 的升级版本，3 是版本号，它在 CSS2.1 的基础上增加了很多强大的新功能</p><p>2001 年 5 月，W3C 完成了 CSS3 的工作草案，主要包括选择器、盒模型、背景和边框、文字特效、2D&#x2F;3D 转换、动画、多列布局、用户界面。</p><h3 id="CSS3-的作用："><a href="#CSS3-的作用：" class="headerlink" title="CSS3 的作用："></a>CSS3 的作用：</h3><p>CSS3 把很多以前需要使用图片和脚本来实现的效果、甚至动画效果，只需要短短几行代码就能搞定。</p><p><strong>例如：</strong>圆角、图片边框、文字阴影、盒阴影、过渡、动画等。CSS3 简化了前端开发人员的设计过程，加快了页面的载入速度。</p><h3 id="CSS3-新增选择器"><a href="#CSS3-新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h3><ul><li><p><strong>属性选择器：</strong></p><blockquote><p>[attribute!&#x3D;value]非属性值选择器</p><p>[attribute^&#x3D;value]属性值以某个字符串开头的选择器</p><p>[attribute$&#x3D;value]属性值以某个字符串结尾的选择器</p><p>[attribute*&#x3D;value]属性值中包含某个字符串的选择器</p><p>[selector1][selector2][selectorN] 多属性选择器(交集属性选择器)</p></blockquote></li></ul><p><strong>注：jQurey 也同用</strong></p><ul><li><strong>伪类选择器：</strong>在:link、:active、:visited、:hover 的基础上 CSS3 新增了其它伪类选择器</li></ul><blockquote><p>1、结构(位置)伪类选择器：利用 HTML 树状结构实现元素选择</p><blockquote><p>1.:first-of-type 例：ul li:first-of-type 选择 ul 下子元素的第一个 li 标签</p><p>2.:last-of-type 例：ul li:last-of-type 选择 ul 下子元素的最后一个 li 标签</p><p>3.:nth-of-type(n) 例：ul li:nth-of-type(n) 选择某个 ul 下的一个或多个特定的子元素 li 标签</p><p>4.:first-child 例：ul li:first-child 选择 ul 下的第一个子元素 li 标签</p><p>5.:last-child 例：ul li:last-child 选择 ul 下的最后一个子元素 li 标签</p><p>6.:nth-child(n) 例：ul li:nth-child(n) 选择某个 ul 下的一个或多个特定的子元素 li 标签</p><p><strong>注：1&#x2F;4、2&#x2F;5、3&#x2F;6 用法相同</strong></p><p>n 如果是数字，就是选择第 n 个子元素，里面数字从 1 开始…</p><p>n 可以是关键字：even 偶数，odd 奇数</p><p>n 可以是公式：从 0 开始计算，每次加 1 往后面计算，这里必须是 n,不能是其他字母，但是第 0 个元素或者超出了元素的个数会被忽略</p><p>2n 代表偶数</p><p>2n+1 代表奇数</p><p>5n 代表 5 的倍数</p><p>n+5 代表从第五个开始到最后一个</p><p>-n+5 代表前五个</p></blockquote><p>2、空伪类选择器 :empty 选中没有任何内容或者子节点的元素</p><p>3、目标伪类选择器 :target 结合锚点进行使用，处于当前锚点的元素会被选中</p><p>4、排除伪类选择器 :not(选择器) 选中除了()内选择器的所有元素</p></blockquote><p><strong>注：以下所写的新增选择器都可用于 jQurey</strong></p><p><strong>扩充：选择器:select{background:blue;color:blank;},设置浏览器中鼠标选中文本的样式</strong></p><ul><li><p><strong>伪元素选择器：</strong>利用 css 创建新标签元素，从而简化 HTML 结构，新创建的这个元素在文档中是找不到的，所以称为伪元素选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">（<span class="hljs-number">1</span>）<span class="hljs-selector-pseudo">::first-line</span> <span class="hljs-comment">/*选中段落的第一行*/</span><br><br>（<span class="hljs-number">2</span>）<span class="hljs-selector-pseudo">::first-letter</span> <span class="hljs-comment">/*选中段落的第一个字*/</span><br><br>（<span class="hljs-number">3</span>）<span class="hljs-selector-pseudo">::before</span> <span class="hljs-comment">/*在选中元素内部的头部添加所需求的内容*/</span><br><br>（<span class="hljs-number">4</span>）<span class="hljs-selector-pseudo">::after</span> <span class="hljs-comment">/*在选中元素内部的末尾添加所需求的内容*/</span><br></code></pre></td></tr></table></figure></li><li><p>伪元素用法：</p><blockquote><p>1:利用伪元素插入文字</p><p>2:利用伪元素插入背景图片</p><p>3:利用伪元素在多个标题前加上连续编号</p></blockquote></li></ul><p><strong>语法：选择器::before{content:counter(计数器名,样式)’.’;}</strong></p><p><strong>选择器{counter-increment:计数器名;}</strong></p><p><strong>注：’.’不是必须的</strong></p><p><strong>说明：</strong></p><blockquote><p>1.before 和 after 创建的元素属于行内元素</p><p>2.before 和 after 必须有 content 属性、display:inline-block 属性和宽高属性</p><p>3.伪元素只能给双标签添加，不能给单标签添加</p><p>4.伪元素的冒号前不能有空格，如 E ::before 这个写法是错误的</p><p>5.通过伪元素添加的图片不可以调整大小！！！</p></blockquote><h3 id="颜色模式："><a href="#颜色模式：" class="headerlink" title="颜色模式："></a>颜色模式：</h3><p>相比 CSS2 版本新增两种颜色样式</p><blockquote><p><strong>1.raba(红,绿,蓝,透明度)</strong></p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rgba(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>注：第一个参数到第三个参数代表颜色是由 0 到 9、a 到 z 组成的，透明度是 0 到 1，零点几的 0 可以省略不写</p><p><strong>2.HSLA 模式：</strong>HSLA 模式是通过对色调(H)、饱和度(S)、亮度(L)、透明度四个颜色通道的 变化以及它们相互的叠加得到各式各样的颜色 HSL 标准几乎可以包括人类视力所能感知的所有颜色。</p><p>例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hsl(<span class="hljs-number">360</span>,<span class="hljs-number">100%</span>,<span class="hljs-number">53%</span>,<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>注：\</p><p>h:色调(hue)，0(或 360)表示红色，120 表示绿色，240 表示蓝色，也可以取其他数值来指定颜色。取值为：0 - 360</p><p>s:饱和度(saturation)，指颜色的深浅度和鲜艳程度。取 0-100%范围的值，其中 0 表示灰度(没有该颜色)，100%表示饱和度最高(颜色最鲜艳)</p><p>l:亮度(lightness)，取 0-100%范围的值，其中 0 表示最暗(黑色)，100%表示最亮(白色)</p><p>a:透明度，取值 0-1（rgba 中的 a 同理）</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*background:HSLA(色调,饱和度,亮度,透明度)*/</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="CSS3-新增的文本样式"><a href="#CSS3-新增的文本样式" class="headerlink" title="CSS3 新增的文本样式"></a>CSS3 新增的文本样式</h3><ul><li><p>文本换行样式：</p><blockquote><p>1、文字阴影样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-shadow</span>: x y blur color;<br></code></pre></td></tr></table></figure><p>注：</p><p>x 表示水平位移(正值偏右，负值偏左)</p><p>y 表示垂直位移(正值偏下，负值偏上)</p><p>blur 表示模糊程度(该值可选)</p><p>color 表示阴影的颜色(该值可选)</p><p>此样式没有内外阴影，没有阴影尺寸数值，阴影可叠加操作</p><p>2、 让长单词与 URL 地址自动换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">word-wrap</span>: break-word;<br></code></pre></td></tr></table></figure><p>3、只能在半角空格或连接字符处换行，代表当前默认值，可以解决汉字换行英文单词不换行的问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">word-break</span>: keep-all;<br></code></pre></td></tr></table></figure><p>4、允许在单词内换行(对于标点符号来说,允许标点符号位于行首,IE 不支持)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">word-break</span>: break-all;<br></code></pre></td></tr></table></figure><p>5、white-space:nowrap; 文本不会换行，文本会在在同一行上继续，直到遇到 <br>标签为止</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css">例：<br><span class="hljs-comment">/*单行文本溢出显示省略号*/</span><br><br><span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br><br><span class="hljs-comment">/*强制一行内显示文本*/</span><br><br><span class="hljs-attribute">white-space</span>:nowrap;<br><br><span class="hljs-comment">/*超出部分隐藏*/</span><br><br><span class="hljs-attribute">overflow</span>:hidden;<br><br><span class="hljs-comment">/*文字超出部分用省略号代替*/</span><br><br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><br><br><span class="hljs-comment">/*多行文本超出显示...*/</span><br><br><span class="hljs-attribute">overflow</span>:hidden;<br><br><span class="hljs-attribute">text-overflow</span>:ellipsis;<br><br><span class="hljs-attribute">display</span>:-wibkit-box;<br><br>-webkit-line-clamp:<span class="hljs-number">2</span>;<br><br>-webkit-box-orient:vertical;<br></code></pre></td></tr></table></figure><p>6、文本描边样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">text-stroke:宽度 颜色; 要加-webkit-前缀<br></code></pre></td></tr></table></figure><p>注：描边由外而内</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">例： <span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">100px</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>;<br>  -webkit-text-stroke: <span class="hljs-number">3px</span> red;<br>&#125;<br></code></pre></td></tr></table></figure><p>7、字体自定义样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">font-family：设置文本的字体名称，该名称可被当作字体引用</span><br><span class="hljs-comment">src: url(&quot;字体文件地址&quot;);//可以是线上地址也可以是本地地址，网页加载时会自动从服务器下载字体文件，再显示出来</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>例：<br><span class="hljs-keyword">@font-face</span>&#123;<br><span class="hljs-attribute">font-family</span>:gift;<br><span class="hljs-attribute">src</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">media/gift.ttf</span>);<br>&#125;<br><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">font-family</span>:gift;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li></ul><h3 id="新增的背景相关的样式"><a href="#新增的背景相关的样式" class="headerlink" title="新增的背景相关的样式"></a>新增的背景相关的样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">backface-visibility</span>: visible/hidden; <span class="hljs-comment">/*设置元素正面不可见时设置元素背面显示隐藏*/</span><br><br><span class="hljs-attribute">background-repeat</span>: round/space; <span class="hljs-comment">/*设置是否及如何重复背景图像*/</span><br></code></pre></td></tr></table></figure><p>注：</p><p>1、round 属性</p><blockquote><p>1.容器空间大于图片</p><p>round 充分利用容器空间，重复 n 次之后如果剩余空间大于等于 imgWidth*50%则重复第 n+1 次，否则拉伸已经重复的背景图</p><p>2.容器空间小于图片</p><p>round 缩放背景图至容器大小（非等比例缩放）</p></blockquote><p>2、space 属性</p><blockquote><p>1.容器空间大于图片</p><p>space 在不缩放的前提下尽可能多的重复图片，如果剩余空间不足以再次铺满一张图片，则两端对齐，中间等距排布</p><p>2.容器空间小于图片</p><p>space 背景图不会产生缩放，会被裁切</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-attachment</span>: scroll <span class="hljs-comment">/*/fixed/local/inhert*/</span>; <span class="hljs-comment">/*控制背景图片随滚动轴的移动方式*/</span><br></code></pre></td></tr></table></figure><p>注：</p><blockquote><p>scroll 属性：默认值，背景图相对于元素固定(随着页面窗口滚动)</p><p>fixed 属性：背景图相对于视口固定，所以随页面滚动背景不动,相当于背景被设置在 body 上。</p><p>local 属性：背景图相对于元素内容固定</p><p>inhert 属性：继承父元素背景图片 attachment 的属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-position</span>: ; <span class="hljs-comment">/*x值 y值; 控制背景图像在元素中的位置*/</span><br></code></pre></td></tr></table></figure><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>1.关键字：当某一方向的关键字为 center 时可省略，可用关键字有 top、left、bottom、right、center</p><p>2.具体值：正值从左向右移动或从上向下移动，负值从右向左移动或从下向上移动</p><p>3.百分比： 若只写了一个值，另一个值将是 50%</p><p>水平方向偏移：{容器的宽度—背景图片的宽度}*百分比 x，超出的部分隐藏。</p><p>垂直方向偏移：{容器的高度—背景图片的高度}*百分比 y，超出的部分隐藏</p></blockquote><p>4.新用法：</p><blockquote><p>在 CSS2.1 中，背景定位只支持以左上角为参照进行定位，在 CSS3 中新增了可以选择参照方向的定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*例：background-position：水平参照方向 偏移值 垂直参照方向 偏移值;*/</span><br><br><span class="hljs-attribute">background-position</span>: rigeht <span class="hljs-number">10px</span> bottom <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><p><strong>注：同时必须写水平参照方向、垂直参照方向和两个偏移值</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-origin</span>：<span class="hljs-comment">/*告诉浏览器background-position是相对于哪里定位的*/</span><br></code></pre></td></tr></table></figure><h5 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>padding-box: 默认值，决定背景定位起始位置从 padding 的外边缘开始显示背景图片</p><p>border-box: 决定背景定位起始位置从 border 的外边缘开始显示背景图片</p><p>content-box: 决定背景定位起始位置从 content 的外边缘开始显示背景图片</p><p><strong>注：如果将 background-attachment 设置为 fixed，background-origin 将不起任何作用</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>：<span class="hljs-comment">/*指定背景图片的尺寸*/</span><br></code></pre></td></tr></table></figure><h5 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>1.auto:默认值，将保持背景图片的原始高度和宽度</p><p>2.px(像素)&#x2F;%(百分比): 取具体的整数值或百分比</p><p><strong>注：取百分比，相对于元素的宽度和 padding 的总和来计算 只写一个值，设置图片的宽度，图片的高度按比例自动被设置，写两个值分别设置图片的宽高</strong></p><p>3.cover: 将背景图片放大,以适合铺满整个容器,背景图像有可能超出容器，超出部分隐藏</p><p>4.contain: 保持背景图像本身的宽度比例，将背景图像缩放到宽度或高度正好适应所定义背景容器的区域，背景图像始终被包含在容器内</p><p><strong>注：满足一个条件就会停止</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-clip</span>：<span class="hljs-comment">/*定义背景图像的裁剪区域*/</span><br></code></pre></td></tr></table></figure><h5 id="说明：-3"><a href="#说明：-3" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>border-box: 默认值，表示从 border-box 区域（包括 border-box 区域）开始向内裁剪</p><p><strong>注：背景颜色和背景图片都是同步与边框重合</strong></p><p>padding-box: 表示从 padding-box 区域（包括 padding-box 区域）开始向内裁剪</p><p>content-box: 表示从 content-box 区域（包括 content-box 区域）开始向内裁剪</p><p>text：以文字的范围轮廓来裁剪背景图片</p><p><strong>注：只有 chrome 支持，所以通常想使用它，需要 -webkit-background-clip:text;</strong></p><p><strong>必须写 color:transparent,如果不写系统会默认以文字颜色为默认背景颜色</strong></p><p><strong>相关代码必须作用在一个有文字的标签上</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>：<span class="hljs-comment">/*多重背景图像，允许为元素设置多个背景图像*/</span><br><span class="hljs-comment">/*写法：*/</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>() , <span class="hljs-built_in">url</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：这种情况最左侧的路径显示在最上面</span><br><span class="hljs-comment">同时必须设置background-repeat: no-repeat否则只看到最上边的一张图片</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">设置每一张背景图片大小</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例：background-size:第一张尺寸,第二张尺寸,第三张尺寸...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="background-的简写规则："><a href="#background-的简写规则：" class="headerlink" title="background 的简写规则："></a>background 的简写规则：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: color image repeat attachment position/size origin clip;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意：position和size只有一个值时，默认position属性</span><br><span class="hljs-comment">background-origin和background-clip中仅存在一个属性值时，该属性为background-clip</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>怪异盒模型的样式及概念</strong></p><p><strong>盒子模型：</strong></p><p>分由 margin、border、padding 和 content 四部分组成。</p><p><strong>标准盒模型(默认)：</strong></p><p>当给盒子设置宽高时，是给 content 区域设置的宽高。添加 padding 或 border 后，宽高都会进行相应增长</p><p><strong>怪异盒模型：</strong></p><p>当给盒子设置宽高时，是给 border、padding 和 content 的整体设置的宽高。添加 padding 或者 border 属性后，会从中减少 content 内容的占据区域，来为 padding 和 border 制造空间，盒子宽高不会相对应的进行增长。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 采用标准模式解析计算，也是默认模式 */</span><br><span class="hljs-attribute">box-sizing</span>: content-box;<br></code></pre></td></tr></table></figure><h5 id="注：盒子宽高-x3D-内容宽高-content"><a href="#注：盒子宽高-x3D-内容宽高-content" class="headerlink" title="注：盒子宽高 &#x3D; 内容宽高(content)"></a>注：盒子宽高 &#x3D; 内容宽高(content)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 采用怪异模式解析计算 */</span><br><span class="hljs-attribute">box-sizing</span>: border-box;<br></code></pre></td></tr></table></figure><h5 id="注：盒子宽高-x3D-内容宽高-content-内边距-padding-边框-border"><a href="#注：盒子宽高-x3D-内容宽高-content-内边距-padding-边框-border" class="headerlink" title="注：盒子宽高 &#x3D; 内容宽高(content) + 内边距(padding) + 边框(border)"></a>注：盒子宽高 &#x3D; 内容宽高(content) + 内边距(padding) + 边框(border)</h5><h3 id="CSS3-新增的边框样式"><a href="#CSS3-新增的边框样式" class="headerlink" title="CSS3 新增的边框样式"></a>CSS3 新增的边框样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>：<span class="hljs-comment">/* 创建一个半径为n的圆,将其放到预设置的角上进行相切,多余的部分裁剪掉 */</span><br></code></pre></td></tr></table></figure><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><blockquote><p>border-radius: 20px 40px 60px 80px &#x2F; 10px 20px 30px 40px</p><p>‘&#x2F;‘ 左侧是水平半径尺寸，右侧是垂直半径尺寸</p><p>正圆满足的条件：元素宽高相等时，border-radius 值为元素实际宽高的一半</p><p>注：其中包括 padding 和 border 的值</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image</span>：<span class="hljs-comment">/*指定边框使用的图片*/</span><br><span class="hljs-attribute">border-image-source</span>：<span class="hljs-comment">/*边框图片地址*/</span><br></code></pre></td></tr></table></figure><h5 id="说明：-4"><a href="#说明：-4" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>none 表示 border-image 不做任何效果，边框使用 border-style 指定的样式。</p><p>url()：指定边框图片的路径</p><p>border-image-slice:上 右 下 左; fill 边框图像切片，边框图片向内偏移</p></blockquote><h5 id="说明：-5"><a href="#说明：-5" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>上右下左四个值可以是纯数字或者百分比</p><p>纯数字没有单位，默认单位就是像素(px)。1 代表 1px。</p><p>百分比值大小是相对于边框图片的大小</p><p>如果不加 border 属性,border-image-slice 必须有 fill 属性</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image-width</span>：<span class="hljs-comment">/*边框图片宽度*/</span><br></code></pre></td></tr></table></figure><h5 id="注：-1"><a href="#注：-1" class="headerlink" title="注："></a>注：</h5><blockquote><p>单独使用此属性不占用盒模型大小</p></blockquote><h5 id="说明：-6"><a href="#说明：-6" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>属性值的四种单位区别</p></blockquote><blockquote><p>1.具体单位 px, em… 单位的尺寸值</p><blockquote><p>如：border-image-width：100px;</p></blockquote><p>2.百分比为盒子宽度的百分比</p><blockquote><p>如：border-image-width：10%;</p></blockquote><p>3.不带单位的数字，它表示 border-width 的倍数 1 就是 1 * border-width</p><blockquote><p>如：border-image-width：1;</p></blockquote><p>4.auto，如果 border-image-slice 的值为 100， 那么取过来就是 100px</p><blockquote><p>如：border-image-width：auto;</p></blockquote></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image-repeat</span>：<span class="hljs-comment">/*边框背景是否重复*/</span><br></code></pre></td></tr></table></figure><h5 id="说明：-7"><a href="#说明：-7" class="headerlink" title="说明："></a>说明：</h5><ul><li><p>stretch(默认) 拉伸 4 个角 4 个区域分别做水平和垂直方向的拉伸,来填补边框的间隙</p></li><li><p>repeat 让 4 个角 4 个区域做完水平和垂直方向的复制图像，把边框之间的空隙填满</p></li><li><p>round 平铺，整数次的平铺图片（元素可能被自动调整大小以适应该要求）</p></li></ul><h5 id="复合写法时："><a href="#复合写法时：" class="headerlink" title="复合写法时："></a>复合写法时：</h5><blockquote><p>只有一个参数表示水平方向及垂直方向均使用此参数</p><p>两个参数表示第一个参数表示水平方向，第二个参数表示垂直方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*例：*/</span><br><span class="hljs-attribute">border-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">border.png</span>) <span class="hljs-number">30%</span> <span class="hljs-number">40%</span> round repeat;表示水平方向round（平铺），垂直方向repeat（重复）<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image-outset</span>：<span class="hljs-comment">/*向外扩散，不占位*/</span><br></code></pre></td></tr></table></figure><h5 id="注：-2"><a href="#注：-2" class="headerlink" title="注："></a>注：</h5><blockquote><p>border-width 占位</p><p>outset 向外扩散的效果类似于行内元素的上下内边距作用到页面的效果</p><p>outset 参数一定要在 width 之后，假设 border-image-width 缺省，仍然需要在原来 width 位置写上 ‘&#x2F;’</p><p>border-image 简写语法：border-image:source slice&#x2F;width&#x2F;outset repeat;</p></blockquote><h3 id="CSS3-新增特效样式"><a href="#CSS3-新增特效样式" class="headerlink" title="CSS3 新增特效样式"></a>CSS3 新增特效样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*向盒子添加阴影，支持添加一个或者多个*/</span><br><span class="hljs-attribute">box-shadow</span>: x-shadow y-shadow blur spread color inset;<br></code></pre></td></tr></table></figure><h5 id="其中："><a href="#其中：" class="headerlink" title="其中："></a>其中：</h5><blockquote><p>x-shadow: 水平阴影偏移量(必须)</p><p>y-shadow: 垂直阴影偏移量(必须)</p><p>blur: 模糊距离(可选)</p><p>spread: 阴影尺寸(可选)</p><p>color: 阴影颜色，默认和文本颜色一致(可选)</p><p>inset: 内部阴影(可选)，该值为空时，则元素的阴影类型为外阴影</p><p>想添加多层阴影时，需要用逗号隔开</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*倒影特效*/</span><br>box-reflect：；<br></code></pre></td></tr></table></figure><h5 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h5><blockquote><p>none(默认值)，表示无倒影。</p><p>direction：生成倒影的方向，above、below、left、right 分别代表上下左右。</p><p>offset：倒影与对象之间的间隔，取值可以为数字或百分比，可以为负数。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*倒影遮罩层的效果*/</span><br><span class="hljs-attribute">mask</span>-box-image: none/url/linear-gradient/radial-gradient/conic-gradient;<br></code></pre></td></tr></table></figure><h5 id="说明：-8"><a href="#说明：-8" class="headerlink" title="说明："></a>说明：</h5><blockquote><p>none 无遮罩图像</p><p>url 使用绝对或相对地址指定遮罩图像</p><p>linear-gradient&#x2F;radial-gradient&#x2F;conic-gradient 使用线性渐变或径向渐变或圆锥渐变对应格式创建遮罩图像。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*例如：*/</span><br>-webkit-box-reflect: below <span class="hljs-number">0px</span> <span class="hljs-built_in">-webkit-linear-gradient</span>(transparent, transparent<br>      <span class="hljs-number">50%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>));<br></code></pre></td></tr></table></figure></blockquote><h3 id="CSS3-新增的渐变样式"><a href="#CSS3-新增的渐变样式" class="headerlink" title="CSS3 新增的渐变样式"></a>CSS3 新增的渐变样式</h3><p><strong>定义</strong>：</p><ul><li><p>渐变实际上是两种或多种颜色之间的平滑过渡。而线性渐变是多种颜色沿着一条直线(称为渐变线)过渡</p></li><li><p>渐变的实现由两部分组成：</p><ul><li><p>渐变线和色标</p><blockquote><p>渐变线用来控制发生渐变的方向；</p><p>色标包含一个颜色值和一个位置，用来控制渐变的颜色变化。</p></blockquote></li></ul></li></ul><p><strong>浏览器从每个色标的颜色淡出到下一个，以创建平滑的渐变，通过确定多个色标可以制作多色渐变效果</strong></p><ul><li><strong>线性渐变</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-built_in">direction</span>(方向), color-stop1, color-stop2, ...);<br></code></pre></td></tr></table></figure><p><strong>注：</strong>由渐变线和色标两部分组成，默认是从上到下渐变，deg 表示角度值</p><p>渐变线：渐变的第一个参数是渐变方向用于指定渐变线，默认是 to bottom(从上到下)。可用关键字和角度实现渐变效果</p><p>例：</p><blockquote><p>关键字:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to top, red, blue);<br></code></pre></td></tr></table></figure><p>角度:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>, red, blue);<br></code></pre></td></tr></table></figure><p>色标：必须设置至少两个色标。色标由颜色和位置组成。颜色使用任何一种颜色模式都可以，而位置可以使用百分比或数值。</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.background</span>: <span class="hljs-built_in">linear-gradient</span>(red <span class="hljs-number">0%</span>,blue <span class="hljs-number">100%</span>);<br><br><span class="hljs-number">2</span><span class="hljs-selector-class">.background</span>: <span class="hljs-built_in">linear-gradient</span>(red,blue)<br><br><span class="hljs-number">3</span>.background: <span class="hljs-built_in">linear-gradient</span>(red <span class="hljs-number">30%</span>,blue <span class="hljs-number">60%</span>);<br><br><span class="hljs-number">4</span><span class="hljs-selector-class">.background</span>: <span class="hljs-built_in">linear-gradient</span>(red <span class="hljs-number">0%</span>,red <span class="hljs-number">30%</span>,blue <span class="hljs-number">60%</span>,blue <span class="hljs-number">100%</span>)<br>注：<br><span class="hljs-number">1</span>和<span class="hljs-number">2</span>两串代码是一个效果<br><span class="hljs-number">3</span>和<span class="hljs-number">4</span>两串代码是一个效果<br></code></pre></td></tr></table></figure></blockquote><p><strong>说明</strong>：</p><p>如果颜色位置之间没有空隙那么就没有渐变效果</p><p>若渐变颜色没有指定位置，则它们会均匀分布</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">例：<span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(red, yellow, green, blue);<br></code></pre></td></tr></table></figure><ul><li><strong>重复线性渐变</strong>：重复渐变可以实现线性渐变的重复效果，使色标在渐变线方向上无限重复，实现一些特殊的效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*语法：*/</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(direction, color-stop1, color-stop2, ...);<br><span class="hljs-comment">/*注：</span><br><span class="hljs-comment">1、如果只写了一个颜色位置，默认是颜色的起始位置也是结束位置</span><br><span class="hljs-comment">2、如果第一个值不是0%，那么会被重复性填充</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><strong>使用多背景属性，利用带有透明度的渐变颜色给图片添加渐变的透明效果</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*例：*/</span><br><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.8</span>)),<br>  <span class="hljs-built_in">url</span>(<span class="hljs-string">1.png</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">应用场景：</span><br><span class="hljs-comment">在CSS样式中，渐变相当于背景图片，在理论上可在任何使用url()值的地方采用。</span><br><span class="hljs-comment">比如最常见的background-image、list-style-image以及border-image。</span><br><span class="hljs-comment">但目前为止，仅在背景图片中得到完美的支持</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>径向渐变：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(<br>  shape size [at position],<br>  start-color,<br>  stop-color<br>);<br></code></pre></td></tr></table></figure></li></ul><p><strong>说明</strong>：</p><blockquote><p>shape：</p><p>定义渐变的形状是圆 circle 或椭圆 ellipse(默认值)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">例：<span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red, blue);<br></code></pre></td></tr></table></figure><p>size：</p><p>定义渐变的大小。默认是 farthest-corner(最远的拐角)</p><p>例：使用关键字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">radial-gradient</span>(closest-side at <span class="hljs-number">80%</span> <span class="hljs-number">30%</span>,red,blue)<span class="hljs-comment">/*半径为从圆心到容器边缘的最短距离*/</span><br><br>background-image:<span class="hljs-built_in">radial-gradient</span>(closest-corner at <span class="hljs-number">80%</span> <span class="hljs-number">30%</span>,red,blue)<span class="hljs-comment">/*半径为从圆心到容器最近角的距离*/</span><br><br>background-image:<span class="hljs-built_in">radial-gradient</span>(farthest-side at <span class="hljs-number">80%</span> <span class="hljs-number">30%</span>,red,blue)<span class="hljs-comment">/*半径为从圆心到最远边*/</span><br><br>background-image:<span class="hljs-built_in">radial-gradient</span>(farthest-corner at <span class="hljs-number">80%</span> <span class="hljs-number">30%</span>,red,blue)<span class="hljs-comment">/*半径为从圆心到最远角(默认值)*/</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>注：还可以使用数值和百分比(相对于径向渐变容器的尺寸)</strong></p><p>at position：定义圆心位置 X 轴 Y 轴；</p><p>注：使用关键字：at center center 定义在当前元素的中心点(默认值)</p><p>注：当只有一个值时，默认第二个值为 center</p><p>使用数值：x 轴数值表示在 x 轴上离 0 点(渐变框左上角)的偏移量，y 轴数值表示在 y 轴上离 0 点的偏移量</p><p>start-color：定义开始颜色值；</p><p>stop-color：定义结束颜色值；</p><pre><code class="hljs"> 注：重复性渐变和特别的语法规则及解释等同于线性渐变</code></pre><p><strong>圆锥渐变：</strong>background-image:conic-gradient( [from angle] [at position ], start-color,stop-color)</p><p>说明：from angle：起始角度，角度前加 from 关键字，代表以此角度为起始，使用顺时针方向进行渐变旋转</p><p>at position：中心位置，位置前加 at 关键字，可设置锥形渐变的中心位置</p><p>start-color：定义开始颜色值</p><p>stop-color：定义结束颜色值</p><p>from angle：定义起始角度</p><p>at position：定义中心位置</p><p>色标：必须设置至少两个色标。色标由颜色和位置组成。颜色使用任何一种颜色模式都可以，而位置可以使用百分比或角度</p><p>例：.box1{</p><p>width:200px;height:200px;border-radius:50%;</p><p>&#x2F;&#x2F;一下三种写法相同效果</p><p>background:conic-gradient(red 0deg 90deg,pink 90deg 180deg,yellow 180deg 360deg)</p><p>background:conic-gradient(red 0 40%,pink 0 50%,yellow 0 100%)</p><p>background:conic-gradient(red 0deg 90deg,pink 0deg 180deg,yellow 0deg 360deg)</p><p>}</p><p>效果：</p><p><img src="C:/Users/zcy/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p>注：重复性渐变和特别的语法规则及解释等同于线性渐变</p><p>CSS3 新增的滤镜样式：滤镜是对图像等图形元素执行视觉效果的操作，如模糊、平衡对比度、亮度、色彩饱和 度等</p><p>filter:blur(n) 模糊效果</p><p>注：n 是模糊半径的参数。n 越大图像越模糊。如果未提供参数，则默认值为 0。</p><p>交融效果：1.元素设置 filter:blur 模糊,元素父级设置 contrast 时,会实现模糊元素相交产生水滴交融且相交部分变清晰的效果</p><p>即:进行动画的图形的父元素需要是被设置了 filter: contrast</p><p>2.元素本身设置 filter:contrast,对伪元素设置 filter:blur 模糊,会使得元素和伪元素产生交融</p><p>filter:brightness(n) 图像亮度</p><p>注：n 值越大图像越亮，n 不能取负值，可以是整数或百分比</p><p>0%将创建全黑的图像，100%或 1 使图像不变，默认值为 1，n 高于 100%会是图像更亮</p><p>filter:contrast(n) 图像的对比度</p><p>注：n 可以是整数或百分比</p><p>0%将创建全黑的图像，100%或 1 保持图像不变，允许超过 100%的值，从而提供对比度较低的结果。默认值为 1</p><p>filter:drop-shadow(args1 args2 args3 args4) 阴影效果</p><p>filter:grayscale(n) 将图像转化为灰度</p><p>注：n 值 100%表示完全是灰度，值 0%保留图像不变，默认值为 0。</p><p>filter:invert(n) 图像的反转</p><p>注：像 Photoshop 这样的反转效果应用于图像。100%或 1 表示被完全反转。0%表示不反转。默认值为 0。不允许使用负值</p><p>filter:opacity(n) 透明度</p><p>注：n 可以是整数或百分比，0%为完全透明，100%或 1 保持图像不变。默认值为 1</p><p>filter:sepia(n) 棕褐色效果</p><p>注：n 可以是整数或百分比，100%或 1 是完全棕褐色，0%或 0 保留图像不变。默认值为 0。</p><p>filter:saturate(n) 图像的饱和度</p><p>注：n 可以是整数或百分比，0%表示完全不饱和，100%保留图像不变。允许值超过 100%， 从而提供超饱和效果。默认值为 1。</p><p>**flex****布局样式**</p><p><strong>概念：</strong>传统布局的解决方案基于盒模型，依赖 display+float+position，它对于那些特殊布局非常不方便，</p><p>比如垂直居中就不容易实现，而学习 flex 后会变得更便捷，Flex 布局将成为未来布局的首选方案</p><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>弹性盒子布局的目的是提供一种更加有效的方式来对容器中的子元素进行排列、对齐和分配空白空间</p><p>注：任何一个容器都可以指定为 Flex 布局，行内元素也可以使用 Flex 布局</p><p>Webkit 内核的浏览器，必须加上-webkit 前缀</p><p>设为 Flex 布局后，子元素的 float、clear 和 vertical-align 属性将失效。</p><p>采用 Flex 布局的元素，称为 flex container，简称”容器”。它的所有子元素自动成为容器成员，称为 flex item，简称”项目”。</p><p>说明：容器默认存在两根轴</p><pre><code class="hljs">       1：水平主轴 main axis</code></pre><p>注：主轴的开始位置(与边框的交叉点)叫 main start，结束位置叫做 main end</p><pre><code class="hljs">       2：垂直交叉轴 cross axis</code></pre><p>注：交叉轴的开始位置叫做 cross start ，结束位置叫 cross end</p><p>3：项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size</p><p>父容器的相关样式设置</p><p>注：首先要给父元素添加 display:flex;代码，定义该元素为弹性容器</p><p>默认弹性容器中的元素从左到右依次排列</p><p>flex-direction：决定主轴的方向(即项目的排列方向)</p><p>说明：row(默认)主轴为水平方向，起点在左端</p><p>row-reverse 主轴为水平方向，起点在右端</p><p>column 主轴为垂直方向，起点在上沿</p><p>column-reverse 主轴为垂直方向，起点在下</p><p>flex-wrap:nowrap&#x2F;wrap; 设置容器内的项目不允许换行(默认值)或能换行</p><p>flex-flow:主轴方向 如何换行；设置主轴的方向和项目在主轴上的对齐方式，是 fiex-direction 和 flex-wrap 两个属性的简写</p><p>注：默认值为 flex-flow:row nowrap;</p><p>justify-content：定义项目在主轴上的水平对齐方式</p><p>说明：flex-start(默认值)左对齐</p><p>flex-end 右对齐</p><p>center 居中</p><p>space-around 每个项目两侧的间隔相等</p><p>space-between 两端对齐，项目之间的间隔都相等</p><p>space-evenly 每个项目的间隔与项目和容器之间的间隔是相等的</p><p>align-items：单行项目的交叉轴对其方式</p><p>说明：stretch(默认值)如果项目未设置高度或设为 auto，将占满整个容器的高度</p><p>flex-start：交叉轴的起点对齐</p><p>flex-end：交叉轴的终点对齐</p><p>center：交叉轴的中点对齐。</p><p>baseline: 项目的第一行文字的基线对齐</p><p>align-content：定义了多根轴线的对齐方式，前提是需要设置 flex-wrap: wrap，否则不会有效</p><p>说明：stretch(默认值)轴线占满整个交叉轴</p><p>flex-start 与交叉轴的起点对齐</p><p>flex-end 与交叉轴的终点对齐</p><p>center 与交叉轴的中点对齐</p><p>space-between 与交叉轴两端对齐，轴线之间的间隔平均分布</p><p>space-around 每根轴线两侧的间隔都相等</p><p>子项目相关设置</p><p>order 定义项目的排列顺序。数值越小，排列越靠前，默认为 0，可以是负数</p><p>flex-grow 容器中剩余空间的多少应该分配给项目，也称为扩展规则</p><p>注：最终的项目的宽度为：自身宽度 + 容器剩余空间分配宽度</p><p>默认 0 即如果存在剩余空间，也不放大</p><p>如果所有项的属性都为 1，则它们将等分剩余空间(如果有的话)</p><p>flex-shrink：指定项目的收缩比例</p><p>注：如果容器空间不足，项目将缩小，默认值是 1</p><p>如果所有项的属性都为 1，当空间不足时，都将等比例缩小</p><p>如果一个项的属性为 0，其他项目都为 1，则空间不足时，为 0 的不缩小。负值对该属性无效</p><p>flex-basis：指定了子项在容器主轴方向上的初始大小</p><p>注：优先级高于自身的宽度 width，默认值为 auto，即项目的本来大小</p><p>可以写百分比，是以父元素的宽度来实现的</p><p>项目的 flex 属性：是 flex-grow、flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto</p><p>注：flex: 数值，在子项不设置宽度的情况下，数值表示占多少份</p><p>flex: auto，则其计算值为 1 1 auto</p><p>flex: none，则其计算值为 0 0 auto</p><p>flex: 0 1 auto; 默认值，建议优先使用</p><p>align-self：允许设置单个项目在交叉轴的对齐方式，可覆盖 align-items 属性</p><p>说明：auto(默认)表示继承父元素的 align-items 属性</p><p>flex-start 交叉轴的起点对齐</p><p>flex-end 交叉轴的终点对齐</p><p>center 交叉轴的中点对齐</p><p>stretch 如果项目未设置高度或设为 auto，将占满整个容器的高度</p><p>baseline 项目的第一行文字的基线对齐</p><p><strong>响应式(**<strong>媒体子查询)*</strong>*样式</strong></p><p>概念：Responsive design 能实现不同屏幕分辨率的终端上浏览网页展示不同样的样式，在不改变网页内容的情况下，根据浏览器窗口的大小来 选择一种页面的布局以精确的适应不同的设备，简单来说 就是写一套代码适应不同的屏幕尺寸、显示不同的合理的样式</p><p>优点：节约开发成本，适用于主流设备，pc 和 webApp 均可适应</p><p>缺点：代码开发量大，臃肿累赘导致加载速度慢</p><p>应用场景：响应式适用于小型网站，不适用于大型项目</p><p>语法：@media not|only 设备类型 and (媒体特性){满足条件的 css 样式}</p><p>注：and 关键字条件同时成立，相当于‘且’</p><p>not 关键字是用来排除某种制定的媒体类型</p><p>only 用来指定某种特定的媒体类型，可省略</p><p>例：@media only screen and (min-width:1200px) and (max-width:1200px){</p><p>.box{height:500px;background:red;}</p><p>}</p><p>设备类型：媒体查询所能匹配到的设备类型</p><p>注：all 所有媒体</p><p>screen 屏幕设备：用于电脑屏幕、手机屏幕…..</p><p>print 打印设备</p><p>speech 类似的媒体类型，屏幕阅读器</p><p>媒体特性：最小宽度 min-width 是指当前媒体类型大于或等于指定的宽度时，大括号内的样式生效</p><p>最大宽度 max-width 是指当前媒体类型小于或等于指定的宽度时，大括号内的样式生效</p><p>最小设备宽度 min-device-width</p><p>最大设备宽度 max-device-width</p><p>device-aspect-ratio 创建适应不同设备的方向的布局</p><p>设备是竖屏模式(orientation:portrait)</p><p>设备是横屏模式(orientation:landscape)</p><p>其他媒体查询的引入方式</p><p>注：1. <link rel="stylesheet" media="screen and (max-width:600px)" href="demo.css" /></p><p>\2. <style media="(min-device-width:300px) and (max-device-width:500px)"></p><p>#box{width:100px;height:100px;background:red;}</p><p></style></p><p>3.@import url(example.css) screen and (min-width:800px),(color);</p><p>注：逗号是或者的意思</p><p><strong>过渡动画样式</strong></p><p>transition 过渡动画是一个复合属性</p><p>注：CSS3 过渡与元素上的常规样式一起声明。只要有“属性”发生变化时即存在两种状态就可以实现平滑的过渡</p><p>CSS3 的 transition 可以在获得焦点、被点击或对元素任何改变中触发，并平滑地以动画效果改变 CSS 的属性值。</p><p>在 CSS 中可以通过一些伪类触发，如：hover、:focus、:target 和:checked 等</p><p>说明：transition-property：应用过渡的 CSS 属性指定需要加过渡效果的属性名称</p><p>注：none 表示没有指定任何样式，all 是默认值，表示指定元素所有样式</p><pre><code class="hljs">        transition-duration：过渡持续时间(该属性的单位是秒s或毫秒ms)，默认0s</code></pre><p>注：时间值不能为负值，必须带单位，否则为默认值</p><pre><code class="hljs">        transition-delay：过渡延迟时间(该属性的单位是秒s或毫秒ms)，定义元素属性延迟多少时间后开始过渡效果</code></pre><p>注：该属性不能为负值并且必须有单位 s 或 ms</p><pre><code class="hljs">         transition-timing-function：过渡效果的速度曲线，用于定义元素过渡属性随时间变化的过渡速度变化效果</code></pre><p>注：取值：单一过渡函数、阶梯函数(steps 函数)和贝塞尔曲线(bezier 函数)</p><p>默认值为：ease 开始和结束慢，中间快</p><p>说明：单一过渡函数</p><p>ease(默认)：速度又快到慢，逐渐变慢(cubic-bezier(0.25,1,0.25,1))</p><p>linear：以相同速度开始至结束的过渡效果(等于 cublic-bezier(0,0,1,1))</p><p>ease-in：速度越来越快，呈现一种加速状态(等于 cubic-bezier(0.42,0,1,1))</p><p>esae-out：速度越来越慢，呈现一种减速状态(等于 cubic-bezier(0,0,0.58,1))</p><p>esae-in-out：先加速再减速，和 ease 类似并且幅度大于 ease(等于 cublic-bezier(0.42,0,0.58,1))</p><p>贝塞尔曲线(bezier 函数)</p><p>语法：cubic-bezier(p0,p1,p2,p3)，三次贝塞尔曲线中的每个点值只允许 0~1 之间的值。</p><p>可视化贝塞尔曲线：<a href="https://cubic-bezier.com/">https://cubic-bezier.com/</a></p><p>steps():阶梯函数，将动画或者过渡效果时间划分成大小相等的时间段来运行</p><p>语法：steps(n)，n 这次过渡分成几段，必须是一个大于 0 的正整数</p><p>复合属性：transition: property duration timing-function delay</p><p>transition:过渡属性 过渡持续时间 过渡函数 过渡延迟时间</p><p>注意：当 transition-duration 和 transition-delay 同时出现时，第一个是 transition-duration，第二个是 transition-delay；当只有一个时间时，它是 transition-duration，而 transition-delay 为默认值 0s</p><p>**2D****效果样式**</p><p>概念：transform 是 CSS 变形一些效果的集合,主要是移动平移、旋转、缩放和倾斜这四种基本操作</p><p>注：变形只能针对块状对象，行内元素需要变成块状对象才能实现变形效果</p><p>2D 变形涉及的属性主要有 transform 变形函数和 transform-origin 变形原点</p><p>transform-origin:x 轴 y 轴 z 轴; 变形操作所依据的基点(变形原点)</p><p>注：默认情况下，变形原点位于元素的中心点</p><p>变形原点 transform-origin 是由 x 轴和 y 轴两个轴的值共同确定的(不考虑 3 维的情况，z 轴的值默认为 0)</p><p>说明：x 轴取值: left&#x2F;center&#x2F;right&#x2F;%&#x2F;px</p><p>y 轴取值: top&#x2F;center&#x2F;bottom&#x2F;%&#x2F;px</p><p>transform:rotate(Ndeg); 变形旋转函数</p><p>注：rotate 旋转函数可以让元素通过指定的角度(deg)根据变形原点进行旋转，默认为 0deg</p><p>当 N 为正数时，元素进行顺时针旋转，当 N 为负数时，元素进行逆时针旋转</p><p>transform:scale()&#x2F;scaleX()&#x2F;scaleY(); 变形缩放函数的三种写法</p><p>注：scale(x,y) 缩放函数可以让元素根据变形原点进行缩放，默认缩放值为 1</p><p>说明：元素水平方向和垂直方向同时缩放(也就是 X 轴和 Y 轴同时缩放)</p><p>默认值为 scale(1,1)</p><p>如果只写一个值 x,y 共用这个值</p><p>scaleX(x) 元素仅水平方向缩放(X 轴缩放)，相当于 scale(x,1)</p><p>scaleY(y) 元素仅垂直方向缩放(Y 轴缩放)，相当于 scale(1,y)</p><p>transform:skew()&#x2F;skewX()&#x2F;skewY(); 变形倾斜函数的三种写法</p><p>注：倾斜函数可以让元素以其变形原点围绕 x 轴和 y 轴进行一定角度的倾斜，默认值为 0</p><p>说明：skew(X,Y)：x 表示 y 轴向 x 轴倾斜的角度，y 表示 x 轴向 y 轴倾斜的角度</p><p>skewX(x)：相当于 skew(x,0)</p><p>skewY(y)：相当于 skew(0,y)</p><p>注：x 取值为正，X 轴不动，y 轴逆时针倾斜一定角度</p><p>x 取值为负，X 轴不动，y 轴顺时针倾斜一定角度</p><p>y 取值为正，y 轴不动，x 轴顺时针倾斜一定角度</p><p>y 取值为负，y 轴不动，x 轴逆时针倾斜一定角度</p><p>当只有一个值时默认为 x 的值，y 的值为 0</p><p>transform:translate()&#x2F;translateX()&#x2F;translateY(); 变形位移函数的三种写法</p><p>注：translate 位移函数可以使元素从原来的位置上移动指定的位移</p><p>translate(X,Y)：x 表示元素在 x 轴方向上的位移；y 表示元素在 y 轴方向上的位移</p><p>translateX(x)：相当于 translate(x,0)</p><p>translateY(y)：相当于 translate(0,y)</p><p>参数 x 和 y 可以是数值、百分比(相对于元素自身的百分比)</p><p>x 为正值时向右移动，为负值时向左移动</p><p>y 为正值时向下移动，为负值时向上移动</p><p>当只有一个值时默认为 x 的值，y 的值为 0</p><p>例：transform:translate(npx) rotate(ndeg)</p><p>注：当前效果是水平或者垂直方向进行旋转</p><p>transform:rotate(ndeg) translate(npx)</p><p>注：当前效果是先进行旋转，再依据旋转开始前的最左边的位置与旋转时最左边的位置形成最远距离进行方向的位置移动</p><p>居中问题：让不知道宽度和高度的元素实现水平、垂直居中</p><p>代码分析：position:\top:50%;left:50%;是相对于界面宽高的</p><p>translate 的-50%,-50%是相对于元素本身宽高的</p><p>transform 变形可以接受多值，出现多个变形函数时用空格分隔，并且按照从左往右的顺序执行</p><p>注：元素发生变形后，元素的 x 轴和 y 轴跟着也一并改变，若元素再进行其他的变形操作，则要沿着改变后的 x 轴和 y 轴进行变形</p><p>**3D****效果样式**</p><p>3D 的概念：我们生活的环境就是 3D 的，照片就是 3D 物品在 2D 平面呈现的样子</p><p>注：当我们在网页构建 3D 效果的时候可以参考“近大远小”、“物体后面遮挡不可见”</p><p>三维坐标系：三维坐标其实就是指立体空间，立体空间是由 3 个轴共同组成的</p><p>注：x 轴：水平向右，x 轴右边是正值，左边是负值</p><p>y 轴：垂直向下，y 轴下面是正值，上面是负值</p><p>z 轴：垂直屏幕，往外面是正值，往里面是负值</p><p>透视&#x2F;景深：透视是 transform 变形 3D 中最重要的内容。如果不设置透视，元素的 3D 变形效果将无法实现</p><p>perspective:值; 指观察者的视线与屏幕之间的距离，简称视距</p><p>注：距离视觉点越近在电脑平面成像越大，越远成像越小</p><p>一般把这个属性加给 3D 元素的父级，单位是像素</p><p>d:就是视距，视距是一个人的眼睛到屏幕的距离</p><p>z:就是 z 轴，物体距离屏幕的距离，z 值越大我们看到的物体就越大</p><p>transform-style:flat; 子元素不开启 3D 立体空间，默认值</p><p>transform-style:preserve-3d; 子元素开启 3D 立体空间</p><p>注：代码添加给父级，但影响的是子盒子</p><p>perspective-origin:x 轴 y 轴; 指观察者的位置</p><p>注：x 轴、y 轴可以设置数值、百分比(width+横向 padding+横向 border)、关键字，默认值为 center center</p><p>摄像机位置不同，所看到的的视觉效果也不尽相同</p><p>3D 移动在 2D 移动的基础上多加了一个可以移动的 z 轴方向</p><p>transform:translateX(x) 用于 X 轴的移动</p><p>transform:translateY(y) 用于 Y 轴的移动</p><p>transform:translateZ(z) 用于 Z 轴的移动，单位一般使用 px</p><p>transform:translate3d(x,y,z) x、y、z 分别指要移动轴的方向</p><p>注：1. x、y 轴距离可以设置百分比，参照物为其元素本身的 width，height；而 Z 轴是不能设置百分比的，因为其元素本身没有厚度</p><p>\2. translate3d()中的 x、y、z 不能省略，如果没有就写 0</p><p>3D 旋转可以让元素在三维平面内沿着 x 轴、y 轴、z 轴或者自定义轴进行旋转</p><p>transform:rotateX(45deg) 沿着 X 轴方向旋转 45 度</p><p>注：左手大拇指指向 x 轴，手指弯曲的方向就是元素沿着 x 轴的旋转方向</p><p>transform:rotateY(45deg) 沿着 Y 轴方向旋转 45 度</p><p>注：左手大拇指指向 y 轴，手指弯曲的方向就是元素沿着 Y 轴的旋转方向</p><p>transform:rotateZ(45deg) 沿着 Z 轴方向旋转 45 度</p><p>transform:rotate3d(x,y,z,45deg) 沿着自定义轴旋转 45 度，了解就行</p><p>注：xyz 表示旋转轴的矢量，表示你是否希望沿着该轴旋转，最后一个值表示旋转的角度</p><p>transform:rotate3d(1,0,0,45deg) 沿着 x 轴旋转 45deg</p><p>transform:rotate3d(0,1,0,45deg) 沿着 y 轴旋转 45deg</p><p>transform:rotate3d(1,1,0,45deg) 沿着对角线轴旋转 45deg</p><p>3D 缩放：缩放没有太大意义，和 2D 缩放效果近乎一样，因为元素本身就没有厚度，所以在 Z 轴上也缩放不了</p><p>注：scale(x,y)使元素水平方向和垂直方向同时缩放（也就是 X 轴和 Y 轴同时缩放）</p><p>scale3d()不能自己单独使用，因为 scaleZ()需要配合景深使用才能有效</p><p>例如：transform:perspective(1200px) scaleZ(10) rotateX(45deg);</p><p><strong>逐帧动画样式</strong></p><p><strong>概念：</strong>逐帧动画是 CSS3 中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果</p><p>@keyframes：通过定义关键帧来定义动画过程的每一帧</p><p>语法：@keyframes 动画名称 {属性设定;}</p><p>例：第一步定义动画效果设定</p><p>@keyframes move {</p><p>0% {width:100px;}</p><p>100% {width:200px;}</p><p>}</p><p>第二步调用动画</p><p>div{width:100px;height:100px;background:pink;animation-name:move;animation-duration:1s}</p><p>注：0%等同于 from，用以定义第一帧的效果设定，100%等同于 to，用以定义动画最后一帧的效果设定</p><p>animation-name：规定@keyframes 的动画名称，必填项</p><p>注：同时使用多个动画用逗号隔开</p><p>animation-duration：规定动画完成的时间，秒(s)或毫秒(ms)，默认值为 0，必填项</p><p>animation-timing-function：规定动画的速度曲线，默认 ease</p><p>注：过渡时间函数共三种取值，分别是单一过渡函数、阶梯函数(steps 函数)和贝塞尔曲线(bezier 函数)，等同于 tansition 过渡属性的用法</p><p>animation-delay：规定动画延迟的时间，默认是 0</p><p>animation-iteration-count：规定动画被播放的次数</p><p>注：n 表示定义动画播放次数的数值，默认 1 次</p><p>infinite：规定动画无限次播放</p><p>animation-direction：规定动画执行的方向</p><p>注：normal 为默认值。动画按常规播放</p><p>reverse 动画反向播放</p><p>alternate 动画先正常运行再反方向运行，并持续交替运行</p><p>alternate-reverse 动画先反方向运行再正方向运行，并持续交替运行</p><p>animation-fill-mode：规定动画结束后的状态</p><p>注：forwards 设置对象状态为动画结束时的状态</p><p>backwards 设置对象状态为动画开始时的状态</p><p>animation-play-state：规定动画运行或停止(经常和鼠标经过等配合使用)</p><p>注：paused 暂停动画</p><p>running (默认)执行动画</p><p>复合属性的用法：animation: 动画名称 持续时间 速度曲线 延迟时间 播放次数 是否反向 动画结束的状态</p><p>注：复合属性不包含 animation-play-state</p>]]></content>
    
    
    <categories>
      
      <category>CSS3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS,CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS知识点</title>
    <link href="/2023/08/18/css%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/08/18/css%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-CSS？"><a href="#什么是-CSS？" class="headerlink" title="什么是 CSS？"></a>什么是 CSS？</h3><p>层叠样式表（Cascading Style Sheets），是一种用于描述网页样式和布局的标记语言。它与 HTML（超文本标记语言）一起使用，通过将样式应用于 HTML 元素，控制网页的外观和风格。</p><h3 id="设置网页图标路径"><a href="#设置网页图标路径" class="headerlink" title="设置网页图标路径"></a>设置网页图标路径</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.ico&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="插入样式表的三种方式"><a href="#插入样式表的三种方式" class="headerlink" title="插入样式表的三种方式"></a>插入样式表的三种方式</h3><ul><li><h5 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h5></li></ul><p>在 html 中，使用 link 标签引入外部样式，link 是一个单标签，写在 head 标签中。</p><p>在 link 标签中必须有两个属性，href 属性用于设置 css 文件路径，rel 属性用于指明引入文件和 html 文件的关系，属性值 stylesheet</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;111.css新建的CSS页面样式保存路径&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h5></li></ul><p>内部样式表写在 style 标签中，style 标签写在 head 标签中</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><h5 id="内联样式表-行内样式表"><a href="#内联样式表-行内样式表" class="headerlink" title="内联样式表(行内样式表)"></a>内联样式表(行内样式表)</h5></li></ul><p>写在标签行内中的 style 的属性中，此种样式效果不常用，因为 css 的目的就是为了结构样式分离，但是行内样式并没有实现。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：行内标签有上下左右内边距和左右外边距，上下内边距会覆盖上方原有的元素，内容与父元素内边框重合</p><ul><li><p>基础选择器</p><ul><li><p>通配符选择器：选中页面中的所有元素，写法是{}</p></li><li><p>标签选择器：选择页面中有相同标签的元素，写法是 “标签名{}”</p></li></ul></li></ul><p>​ 例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>类选择器：选择页面中有相同类名的元素，在标签中的 class 属性用于设置标签的类名，属性值可以随意设置，写法是 “.类名{}”</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.a1</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>id 选择器：选择页面中 id 名字与 id 选择器名称相同的的页面元素，id 名就 id 属性的属性值，id 选择器写法是“#id 名”，id 属性值在页面中具有唯一性</li></ul><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  #”a1” &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>复合选择器&#x2F;群组选择器：多个选择器以逗号链接，可以选中多个选择器，设置样式</li></ul><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<br><span class="hljs-selector-tag">b</span> &#123;<br>  <span class="hljs-attribute">color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>后代选择器：多个选择器用空格链接，但是链接的选择器必须有嵌套关系</li></ul><p>​ 例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">b</span> <span class="hljs-selector-class">.a1</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子元素选择器：多个选择器用“&gt;”链接，这种连接必须是父级子级的关系</li></ul><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">b</span> &#123;<br>  <span class="hljs-attribute">color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="选择器优先级的解释："><a href="#选择器优先级的解释：" class="headerlink" title="选择器优先级的解释："></a>选择器优先级的解释：</h3><p>当多个选择器同时选中一个网页元素时，需要考虑优先级的问题，谁的优先级高谁就会最终显示，优先级有三种原则</p><blockquote><p>就近原则：相同的选择器，后出现的会覆盖先出现的</p><p>具体原则：选择器更具体优先级更高，由高到低分别是 id，类，标签和通配符</p><p>重要原则：在任意的属性后加“ !Important ”，那么这条属性优先级最高</p></blockquote><p>​</p><h3 id="css-一些基本的样式设置"><a href="#css-一些基本的样式设置" class="headerlink" title="css 一些基本的样式设置"></a>css 一些基本的样式设置</h3><ul><li><p>CSS 文本样式设置</p><blockquote><p>color:red;设置文字颜色为红色</p><p>font-style:italic(倾斜)&#x2F;oblique(倾斜等同 italic)&#x2F;normal(取消倾斜); 设置字体倾斜效果</p><p>font-variant:small-caps 或 normal; 设置小写字母的小型大写形式或字母正常显示</p><p>font-weight:bold 或 normal; 设置文字加粗或不加粗</p><p>font-size:1px; 设置文字大小，默认为 16px</p><p>注：换行会出现空白节点，其继承父元素的 font-size 属性，会导致子元素出现间隔效果</p><p>解决方法：给父级设置 font-size:0 或者标签不换行</p><p>font-family:”幼圆”,”宋体”,”仿宋”; 设置文字字体</p><p>line-height:1px; 设置文字行高属性</p><p>注：font 的缩写复合模式内必须同时拥有 font-family 和 font-size 两个属性值</p><p>复合式整体写法：italic small-caps bold 20px&#x2F;20px font-family:”字体”;</p><p>符合写法内没有字体颜色。</p><p>text-transform:lowercase 或 uppercase; 文字以小写或以大写的形式显示</p><p>text-decoration:none; 设置文字没有装饰线（默认显示没有）</p><p>text-decoration:underline; 设置文字下划线（a 标签自带下划线）</p><p>text-decoration:line-through; 设置中间线（删除线）</p><p>text-decoration:overline; 设置上划线</p></blockquote></li><li><p>段落样式</p><blockquote><p>text-indent:2em; 首行缩进两个字符</p><p>text-align:left 或 center 或 right 或 justify(文字两端对齐); 设置文字的对齐方式</p><p>letter-spacing:10px; 设置汉字字符间距</p><p>word-spacing:10px; 设置英文字母间距</p></blockquote></li><li><p>背景样式</p><blockquote><p>background-color:red; 设置背景颜色（所有的标签&#x2F;网页元素都有背景颜色）</p><p>background-image:url(图片路径); 设置背景图片</p><p>background-repeat:repeat&#x2F;no-repeat&#x2F;repeat-x&#x2F;repeat-y; 设置背景图片重复&#x2F;不重复&#x2F;横向重复&#x2F;纵向重复</p><p>background-position:center; 设置背景图片 X&#x2F;Y 轴都居中。其余情况先写 x 轴再写 y 轴，空格隔开。可以用数值 PX&#x2F;百分比表示。</p><p>background-attachment:scroll 或 fixed; 设置背景图片在元素中不跟随页面滚动或跟随页面滚动</p><p>background-size:20px 20px; 背景图片的大小数值，先写水平数值再写垂直数值.</p><p>background 的复合属性语法：background:颜色 图片 重复 定位 滚动</p><p>背景颜色透明度的第一种方法：opacity:0.5; 元素透明度效果</p><p>背景颜色透明度的第二种方法：background-color:rgba(R,G,B,A);</p></blockquote></li><li><p>列表样式表</p><blockquote><p>list-style-type:none; 取消列表项样式（可用 none、disc、circle、square）</p><p>list-style-type:decimal; 有序列表左侧显示形式“1，2，3”</p><p>list-style-type:lower-roman; 有序列表的小写罗马显示形式“i ii iii”</p><p>list-style-type:upper-roman; 有序列表的大写罗马显示形式“I II III”</p><p>list-style-type:lower-alpha; 有序列表的小写英文字母显示形式“a,b,c”</p><p>list-style-type:upper-alpha; 有序列表的大写英文字母显示形式“A,B,C”</p><p>list-style-position:inside&#x2F;outside; 定位列表样式符号在行内&#x2F;行外</p><p>list-style-image:url(图片路径); 可以设置图片为列表项样式</p><p>复合属性语法：list-style:type&#x2F;position&#x2F;image;</p></blockquote></li><li><p>链接属性四种状态样式</p><ul><li><p>（第一顺序）a:link：鼠标未选定的默认样式</p></li><li><p>例：</p></li><li><pre><code class="html">&lt;style&gt;  选择器:link &#123;  &#125;&lt;/style&gt;<figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">- （第二顺序）a:visited：已跳转过的链接样式</span><br><span class="language-xml"></span><br><span class="language-xml">- 例：</span><br><span class="language-xml"></span><br><span class="language-xml">- ```html</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    选择器<span class="hljs-selector-pseudo">:visited</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></code></pre></li><li><p>（第三顺序）a:hover：鼠标移入时的元素样式(所有的标签都有鼠标移入的状态)</p></li><li><p>例：鼠标移入时显示元素</p></li><li><p>&#96;&#96;&#96;css<br>.img2 {<br>  display: none;<br>}</p><p>div:hover .img2 {<br>  display: block;<br>}</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"></span><br><span class="language-xml">- （第四顺序）a:active：鼠标按下时的元素样式</span><br><span class="language-xml"></span><br><span class="language-xml">- 例：</span><br><span class="language-xml"></span><br><span class="language-xml">- ```html</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">    选择器<span class="hljs-selector-pseudo">:active</span> </span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    &#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>表格样式</p><blockquote><p>border-collapse:collapse; 设置单元格边框和表格边框合并在一起</p><p>border-spacing:水平值 垂直值; 设置相邻单元格的间距</p><p>vertical-align:top 或 middle 或 bottom; 表格内文字垂直对齐方式，middle(居中)</p><p>例：解决图片底部有空白区域的问题</p><p>img{vertical-align:middle;}</p><p>overflow:hidden; 将超出盒子的内容隐藏</p><p>overflow:scroll; 盒子添加一个滚动条，可以通过拉动滚动条来查看超出盒子的内容</p><p>overflow:auto; 当盒子内容超出盒子时添加滚动条</p></blockquote></li><li><p>表单文本框样式</p><blockquote><p>outline:none; 设置选中表单控件后，边框为无。</p><p>outline:1px solid red; 设置选中文本框后，边框样式为红色的实线</p><p>边框样式</p><p>border-width:1px; 设置边框粗细数值</p><p>border-style:solid&#x2F;dotted&#x2F;dashed&#x2F;double; 设置边框线样式为实线&#x2F;点状线&#x2F;虚线&#x2F;双实线</p><p>border-color:red; 设置边框颜色</p><p>复合写法：border:1px solid red;</p><p>border-top&#x2F;border-right&#x2F;border-bottom&#x2F;border-left：上&#x2F;右&#x2F;下&#x2F;左边框</p><p>例：利用边框实线属性设置红色三角形样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br><br>  <span class="hljs-attribute">border-top</span>: <span class="hljs-number">20px</span> solid red;<br><br>  <span class="hljs-attribute">border-right</span>: <span class="hljs-number">20px</span> solid tansparent;<br><br>  <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">20px</span> solid transparent;<br><br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">20px</span> solid transparent;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置边框圆角样式</p><p>水平值和垂直值相同时的圆角边设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左) <span class="hljs-built_in">b</span>(上右) <span class="hljs-built_in">c</span>(下右) <span class="hljs-built_in">d</span>(下左);<br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左) <span class="hljs-built_in">b</span>(上右和下左) <span class="hljs-built_in">c</span>(下右);<br><br><span class="hljs-attribute">border-radius</span>:<span class="hljs-built_in">a</span>(上左和下右) <span class="hljs-built_in">b</span>(上右和下左) ;<br><br><span class="hljs-attribute">border-top-left-radius</span>:a; 设置左上角数值<br><br><span class="hljs-attribute">border-top-right-radius</span>:a; 设置右上角数值<br><br><span class="hljs-attribute">border-bottom-right-radius</span>:a; 设置右下角数值<br><br><span class="hljs-attribute">border</span><span class="hljs-attr">--bottom-left-radius</span>:a; 设置左下角数值<br><br>水平值与垂直值不相等的圆角边设置<br><br><span class="hljs-attribute">border</span>-redius:”上” ”右” ”下” ”左”/”上” ”右” ”下” ”左”;<br><br>注：/ 左侧为水平圆角值，右侧为垂直原教值<br></code></pre></td></tr></table></figure></blockquote></li><li><p>内边距样式</p></li></ul><blockquote><p>作用：用来调整子元素在父元素中的位置关系。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">padding-top</span>/<span class="hljs-attribute">padding-right</span>/<span class="hljs-attribute">padding-bottom</span>/<span class="hljs-attribute">padding-left</span>：上/右/下/左内边距(内边距也叫做补白)<br><br>复合语法：<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>；<br><br>注：padding属性需要添加在父元素上。<br></code></pre></td></tr></table></figure><ul><li>外边距样式</li></ul><blockquote><p>作用：用来控制盒子之间的空隙</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span>/<span class="hljs-attribute">margin-right</span>/<span class="hljs-attribute">margin-bottom</span>/<span class="hljs-attribute">margin-left</span>：上/右/下/左外边距(外边距也叫做延白)<br><br><span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;这条代码的作用是设置块元素在父级元素内居中。auto是设置左右两边的数值自动相同，也就是居中。<br><br>复合语法：<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>；<br><br>注：外边距折叠现象，当一个盒子位于另一个盒子的上方，就会出现外边距折叠现象，也就是说相连的这两个外边距中，数值较大的一个会生效<br></code></pre></td></tr></table></figure><ul><li>关于一些 margin 和 padding 的问题及解决方法</li></ul><blockquote><p>父级标签中使用 overflow:hidden;就可以解决外边距重叠</p><p>父级设置一个上边框也会解决外边距重叠(margin 塌陷问题)、</p></blockquote><p>说明：设置角度的值中 padding、margin 的方法相同</p><p>1.当一个值时四个值一样。</p><p>2.两个值是上下值和左右值。</p><p>3.三个值时，第一个为上值，第二个值为左右值，第三个为下值。</p><p>4.四个值时一次对应上右下左四个值。</p><ul><li>元素状态样式</li></ul><blockquote><p>visibility:hidden; 设置元素隐藏，在页面中占据空间</p><p>visibility:visible; 设置元素不隐藏(默认值)</p><p>display:none; 设置元素在页面中消失，不会在页面中占据空间</p><p>display:block; 将元素标签转变为块元素标签（可设置宽高和内外边距，独占一行，由上而下排列）</p><p>display:inline; 将元素标签转换为行内元素（可在同一行显示，可设置边距，但不建议使用）<br>display:inline-block; 将元素标签转换为行内块元素（可以在同一行显示，也具备块元素的特性，img 是行内块元素）</p></blockquote><ul><li>元素浮动样式：无论什么浮动元素都是行内块元素</li></ul><blockquote><p>float:left 或 right;向左浮动或向右浮动。</p><p>（1）利用浮动 float 属性，可以将块元素、行内块元素、行内元素设置在同一行显示</p><p>（2）将元素在它的父元素里尽可能的向左（float :left;）或向右排列（float :right;）</p><p>（3）元素浮动时，直到它的边缘碰到父元 素的边框或者另一个浮动元素为止</p><p>（4）元素浮动后，会脱离文档流，不占据空间，无法将父元素撑开，如果父元素没有高会造成父元素的塌陷，解决办法是清浮动</p></blockquote><h5 id="清浮动的解决办法"><a href="#清浮动的解决办法" class="headerlink" title="清浮动的解决办法"></a>清浮动的解决办法</h5><p><strong>1.万能清浮动</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*在父级元素上设置一个伪类选择器，在其末尾加一个空标签。*/</span><br><br>选择器<span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:””;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">clear</span>:both;&#125;：<span class="hljs-comment">/*此内容为必须项*/</span><br><br><span class="hljs-selector-class">.clearFloat</span><span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:””;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">visibility</span>:hidden;<span class="hljs-attribute">clear</span>:both;&#125;：<span class="hljs-comment">/*此内容为万能请浮动的全部属性代码*/</span><br><br>注：选择器<span class="hljs-selector-pseudo">:after</span>&#123;<span class="hljs-attribute">content</span>:”内容”;&#125;；在子元素末尾添加一个内容为空的元素用于撑开父元素 ，防止父元素塌陷<br></code></pre></td></tr></table></figure><p><strong>2.子元素块标签</strong></p><p>原理：通过设置一个内容为空的块级子元素盒子实现清浮动效果，来限制父级元素的高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在子元素末尾添加一个空的块标签，并设置style=”clear:both;属性，可以清浮动 --&gt;</span><br>&lt;style=”clear:both;”&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">子元素块标签</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3.给父级设置高</strong></p><p><strong>4.给父级设置 overflow:hidden;</strong></p><p><strong>5.父级同样拥有浮动属性</strong></p><p><strong>6..clearFloat:after{zoom:1;}(这个效果可以解决 IE69 版本的清浮动)</strong></p><ul><li>定位样式:</li></ul><blockquote><p>**position:static; **</p><p>普通文档流，默认值，无特殊定位，处于文档流中，</p><p>作用：可以快速取消定位</p><p>**position:relative; **</p><p><strong>相对定位，处于文档流中，元素仍然占据原来的位置</strong></p><p>移动方向：向上 top，向下 bottom，向左 left，向右 right</p><p>说明：元素没有发生移动时等同于文档流效果相同</p><p>当元素发生移动时，原理是当前元素隐身，创建一个新的脱离文档流的元素基于当前元素的位置进行偏移，此时不会影响其余元素的位置</p><p><strong>position:absolute;</strong></p><p><strong>绝对定位</strong></p><p>（1）脱离文档流，不会占据原本文档流的空间位置，不能将没有定位属性的父元素撑开</p><p>（2）会改变元素本身属性，转换为行内块元素，让行内元素支持设置宽高，块元素支持宽度由内容撑开</p><p>（3）定位原点：如果有定位父级(relative&#x2F;absolute)相对于定位父级发生偏移，没有定位父级相对于整个 body 元素发生偏移；</p><p>（4）移动方向：向上 top，向下 bottom，向左 left，向右 right</p><p>（5）当前元素如果没有设置宽高，那么他的宽高会由他本身的内容撑开</p><p>**position:fixed; **</p><p><strong>固定定位</strong></p><p>（1）脱离文档流，不会占据空间位置，不能将父元素撑开</p><p>（2）定位原点：相对于浏览器窗口定位</p><p>（3）固定定位元素，不会随着滚动条滚动而改变他在可视窗口的位置</p><p>（4）移动方向：向上 top，向下 bottom，向左 left，向右 right</p><p>（5）IE6 不支持（兼容性问题），用 JS 解决</p></blockquote><ul><li>z-index:数值;脱离文档流的层级设置，也就是说谁在最上边显示</li></ul><blockquote><p>说明：数值越大，层级越靠前，较大数值的元素会覆盖在较小数值的元素之上，此属性作用于 absolute 或 fixed 的元素</p></blockquote><p>设置鼠标指针样式</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">/设置鼠标移入时自定义鼠标样式/ 选择器<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">cursor</span>: crosshair;<br><br>  <span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/鼠标样式.ico</span>), pointerl;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：设置鼠标样式为图片时，图片必须时以 .ico 为后缀名的 33X33 像素的特殊图片</p><ul><li>其他样式选择</li></ul><blockquote><p>cursor: default; 默认光标(通常是一个箭头)</p><p>cursor: auto; 浏览器默认设置的光标</p><p>cursor: crosshair; 光标呈现为十字线</p><p>cursor: pointer; 光标呈现为指示链接的指针(一只手)</p><p>cursor: text; 使用文本输入指针样式</p><p>cursor: grab; 使用可调整大小指针样式</p></blockquote><h1 id="树状图总结："><a href="#树状图总结：" class="headerlink" title="树状图总结："></a>树状图总结：</h1><p><img src="https://github.com/aarnoo/aarnoo.github.io/blob/master/img/cssszt1.png?raw=true" alt="0251aa7cb441af16a7ccb3e821fe86e"></p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css,笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用指令</title>
    <link href="/2023/08/17/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/08/17/git%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><h3 id="Git-常用的六个命令是什么？"><a href="#Git-常用的六个命令是什么？" class="headerlink" title="Git 常用的六个命令是什么？"></a>Git 常用的六个命令是什么？</h3><blockquote><p><strong>git clone</strong>克隆代码；<br><strong>git log</strong>查看日志；<br><strong>git tag</strong>查看标签；<br><strong>git branch</strong>查看分支；<br><strong>git branch -a</strong>查看远程分支；<br><strong>git pull</strong>拉取。</p></blockquote><ul><li><strong>git init</strong> # 初始化本地 git 仓库(创建新仓库)</li><li><strong>git config –global user.name “”</strong> # 配置用户名</li><li><strong>git config –global user.email “”</strong> # 配置邮箱</li><li><strong>git config –global color.ui true</strong> # git status 等命令自动着色</li><li><strong>git status</strong> 这个命令顾名思义就是查看状态， 这个命令可以算是使用最频繁的一个命令了， 建议大家没事就输入下这个命令， 来查看你当前 git 仓库的一些状态。</li><li><strong>git add</strong> 文件名将文件添加到git仓库中 git add . 就是将没添加的数据都添加上去</li><li><strong>git commit -m ’ ’</strong> 在add之后提交 -m ‘ ’ 放入提交信息 如：first<br>  commit 执行了以上命令代表我们已经正式进行了第一次提交</li></ul><p>  看到这里估计很多人会有疑问， 我想要提交直接进行 commit 不就行了么， 为什么先要再 add一次呢？ 首先 git add 是先把改动添加到一个「暂存区」 ， 你可以理解成是一个缓存区域， 临时保存你的改动， 而 git commit 才是最后真正的提交。 这样做的好处就是防止误提交， 当然也有办法把这两步合并成一步， 不过后面再介绍， 建议新手先按部就班的一步步来。</p><ul><li><p><strong>git branch</strong> 列出本地所有的分支</p><blockquote><p><strong>git branch -r</strong> 列出所有远程分支<br><strong>git branch [name]</strong> 新建一个分支，但依然停留在当前分支<br><strong>git checkout -b [branch]</strong> 新建一个分支，并切换到该分支<br><strong>git merge [branch]</strong> 合并指定分支到当前分支<br><strong>git branch -d [name]</strong> 删除分支<br><strong>git checkout [name]</strong> <a href="https://so.csdn.net/so/search?q=%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF&spm=1001.2101.3001.7020">切换分支</a><br><strong>git push origin –delete [name]</strong> 删除远端分支</p><p><strong>git push origin –delete feat-20221031-amisgit branch -dr [remote&#x2F;branch]</strong> 删除远端分支</p></blockquote></li><li><p><strong>git config –list</strong> 显示当前<a href="https://so.csdn.net/so/search?q=Git%E9%85%8D%E7%BD%AE&spm=1001.2101.3001.7020">Git配置</a></p></li><li><p>设置提交代码时的用户信息</p><blockquote><p><strong>git config –global user.name “[name]”</strong><br><strong>git config –global user.email “[email address]”</strong></p></blockquote></li><li><blockquote><p>-d：可以删除文件夹，因为默认是删除的是file</p></blockquote><blockquote><p>-f：代表强制，如果clean.requireForce配置的为true，则git clean会执行失败，此时可以使用git clean -f强制执行。</p></blockquote><blockquote><p>-i：interactive，可交互的删除文件或目录，这个就比较有意思了，哈哈。</p></blockquote><blockquote><p>-n：dry-run，加入了这个参数，会提示你将会删除哪些文件，但不会删除这些文件。如果确定是你要删除的文件，在将-n这个参数     去掉在执行就OK了。</p></blockquote></li></ul><h2 id="新建代码"><a href="#新建代码" class="headerlink" title="新建代码"></a>新建代码</h2><p>在当前目录新建一个Git代码库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>新建一个目录，将其初始化为Git代码库</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span> [project-name]<br></code></pre></td></tr></table></figure><p>下载一个项目和它的整个代码历史</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">git <span class="hljs-keyword">clone</span> [url]<br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>显示当前的<a href="https://so.csdn.net/so/search?q=Git%E9%85%8D%E7%BD%AE&spm=1001.2101.3001.7020">Git配置</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><p>编辑Git配置文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> -e [<span class="hljs-comment">--global]</span><br></code></pre></td></tr></table></figure><p>设置提交代码时的用户信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git config [--<span class="hljs-keyword">global</span>] user.name <span class="hljs-string">&quot;[name]&quot;</span><br><br><br><br>git config [--<span class="hljs-keyword">global</span>] user.email <span class="hljs-string">&quot;[email address]&quot;</span><br></code></pre></td></tr></table></figure><h2 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><p>添加指定文件到暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git add [file1] [file2] ...<br></code></pre></td></tr></table></figure><p>添加指定目录到暂存区，包括子目录</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">add</span> [dir]<br></code></pre></td></tr></table></figure><p>加当前目录的所有文件到暂存区</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">add</span> .<br></code></pre></td></tr></table></figure><p>删除工作区文件，并且将这次删除放入暂存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git rm [file1] [file2] ...<br></code></pre></td></tr></table></figure><p>停止追踪指定文件，但该文件会保留在工作区</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git rm <span class="hljs-attr">--cached</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>改名文件，并且将这个改名放入暂存区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">mv</span> <span class="hljs-selector-attr">[file-original]</span> <span class="hljs-selector-attr">[file-renamed]</span><br></code></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>提交暂存区到仓库区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">commit</span> <span class="hljs-selector-tag">-m</span> <span class="hljs-selector-attr">[message]</span><br></code></pre></td></tr></table></figure><p>提交暂存区的指定文件到仓库区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git commit [file1] [file2] ... -m [message]<br></code></pre></td></tr></table></figure><p>提交工作区自上次commit之后的变化，直接到仓库区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>a<br></code></pre></td></tr></table></figure><p>提交时显示所有diff信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>v<br></code></pre></td></tr></table></figure><p>使用一次新的commit，替代上一次提交</p><p>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend -m [message]</span><br></code></pre></td></tr></table></figure><p>重做上一次commit，并包括指定文件的新变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">commit</span> <span class="hljs-comment">--amend   ...</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch<br></code></pre></td></tr></table></figure><p>列出所有远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git branch -r<br></code></pre></td></tr></table></figure><p>列出所有本地分支和远程分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git branch -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>新建一个分支，但依然停留在当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，并切换到该分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，指向指定commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>新建一个分支，与指定的远程分支建立追踪关系</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git branch <span class="hljs-attr">--track</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure><p>切换到指定分支，并更新工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>建立追踪关系，在现有分支与指定的远程分支之间</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git branch <span class="hljs-attr">--set-upstream</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[remote-branch]</span><br></code></pre></td></tr></table></figure><p>合并指定分支到当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">merge</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>选择一个commit，合并进当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">cherry-pick</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p><a href="https://so.csdn.net/so/search?q=%E5%88%A0%E9%99%A4%E5%88%86%E6%94%AF&spm=1001.2101.3001.7020">删除分支</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">branch</span> <span class="hljs-selector-tag">-d</span> <span class="hljs-selector-attr">[branch-name]</span><br></code></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">push</span> origin --<span class="hljs-keyword">delete</span> <br><br><br><br>git branch -dr<br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>列出所有tag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git tag<br></code></pre></td></tr></table></figure><p>新建一个tag在当前commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">tag</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>新建一个tag在指定commit</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">tag</span> <span class="hljs-selector-attr">[tag]</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>查看tag信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>提交指定tag</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><p>提交所有tag</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--tags</span><br></code></pre></td></tr></table></figure><p>新建一个分支，指向某个tag</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[branch]</span> <span class="hljs-selector-attr">[tag]</span><br></code></pre></td></tr></table></figure><h2 id="查看所有信息"><a href="#查看所有信息" class="headerlink" title="查看所有信息"></a>查看所有信息</h2><p>显示有变更的文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">status</span><br></code></pre></td></tr></table></figure><p>显示当前分支的版本历史</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><p>显示commit历史，以及每次commit发生变更的文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">log</span> --<span class="hljs-keyword">stat</span><br></code></pre></td></tr></table></figure><p>显示某个文件的版本历史，包括文件改名</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">git log <span class="hljs-attr">--follow</span> <span class="hljs-selector-attr">[file]</span><br><br><br><br>git whatchanged <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示指定文件相关的每一次diff</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git log -<span class="hljs-selector-tag">p</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示指定文件是什么人在什么时间修改过</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">blame</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>显示暂存区和工作区的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff<br></code></pre></td></tr></table></figure><p>显示暂存区和上一个commit的差异</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git diff <span class="hljs-attr">--cached</span> <span class="hljs-selector-attr">[]</span><br></code></pre></td></tr></table></figure><p>显示工作区与当前分支最新commit之间的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git diff HEAD<br></code></pre></td></tr></table></figure><p>显示两次提交之间的差异</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">diff</span> <span class="hljs-selector-attr">[first-branch]</span>...<span class="hljs-selector-attr">[second-branch]</span><br></code></pre></td></tr></table></figure><p>显示某次提交的元数据和内容变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">show</span> [<span class="hljs-keyword">commit</span>]<br></code></pre></td></tr></table></figure><p>显示某次提交发生变化的文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">show</span> <span class="hljs-comment">--name-only [commit]</span><br></code></pre></td></tr></table></figure><p>显示某次提交时，某个文件的内容</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[commit]</span>:<span class="hljs-selector-attr">[filename]</span><br></code></pre></td></tr></table></figure><p>显示当前分支的最近几次提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git reflog<br></code></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>下载远程仓库的所有变动</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">fetch</span> <span class="hljs-selector-attr">[remote]</span><br></code></pre></td></tr></table></figure><p>显示所有远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git remote -v<br></code></pre></td></tr></table></figure><p>显示某个远程仓库的信息</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">show</span> <span class="hljs-selector-attr">[remote]</span><br></code></pre></td></tr></table></figure><p>增加一个新的远程仓库，并命名</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">remote</span> <span class="hljs-selector-tag">add</span> <span class="hljs-selector-attr">[shortname]</span> <span class="hljs-selector-attr">[url]</span><br></code></pre></td></tr></table></figure><p>取回远程仓库的变化，并与本地分支合并</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">pull</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>上传本地指定分支到远程仓库</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">push</span> <span class="hljs-selector-attr">[remote]</span> <span class="hljs-selector-attr">[branch]</span><br></code></pre></td></tr></table></figure><p>强行推送当前分支到远程仓库，即使有冲突</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--force</span><br></code></pre></td></tr></table></figure><p>推送所有分支到远程仓库</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git push <span class="hljs-selector-attr">[remote]</span> <span class="hljs-attr">--all</span><br></code></pre></td></tr></table></figure><p>恢复暂存区的指定文件到工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>恢复某个commit的指定文件到工作区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">checkout</span> <span class="hljs-selector-attr">[commit]</span> <span class="hljs-selector-attr">[file]</span><br></code></pre></td></tr></table></figure><p>恢复上一个commit的所有文件到工作区</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">git checkout .<br></code></pre></td></tr></table></figure><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git reset [file]<br></code></pre></td></tr></table></figure><p>重置暂存区与工作区，与上一次commit保持一致</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">reset</span> --hard<br></code></pre></td></tr></table></figure><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">git reset [commit]<br></code></pre></td></tr></table></figure><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git reset <span class="hljs-attr">--hard</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git reset <span class="hljs-attr">--keep</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><p>新建一个commit，用来撤销指定commit，后者的所有变化都将被前者抵消，并且应用到当前分支</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">revert</span> <span class="hljs-selector-attr">[commit]</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>生成一个可供发布的压缩包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git archive<br></code></pre></td></tr></table></figure><p>备份当前工作区的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git stash<br></code></pre></td></tr></table></figure><p>从Git栈中读取最近一次保存的内容，恢复工作区的相关内容</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git stash <span class="hljs-keyword">pop</span><br></code></pre></td></tr></table></figure><p>显示Git栈内的所有备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git stash list<br></code></pre></td></tr></table></figure><p>清空Git栈</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">git stash <span class="hljs-attribute">clear</span><br></code></pre></td></tr></table></figure><p>git clean —— 未追踪文件清除神器</p><p>测试清理效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">git clean -dn<br></code></pre></td></tr></table></figure><p>输入下面的这句话，就会在你的浏览器出现关于git clean相关的详解。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git,GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2023/06/10/markdown%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <url>/2023/06/10/markdown%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h4 id="Markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档-在-2004-由约翰·格鲁伯创建-通过-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档，后缀一般为-md-markdown。"><a href="#Markdown-是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档-在-2004-由约翰·格鲁伯创建-通过-Markdown-编写的文档可以导出-HTML-、Word、图像、PDF、Epub-等多种格式的文档，后缀一般为-md-markdown。" class="headerlink" title="Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档,在 2004 由约翰·格鲁伯创建,通过 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，后缀一般为 .md, .markdown。"></a>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档,在 2004 由约翰·格鲁伯创建,通过 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档，后缀一般为 .md, .markdown。</h4><hr><h5 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h5><h6 id="使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号。"><a href="#使用-号可表示-1-6-级标题，一级标题对应一个-号，二级标题对应两个-号。" class="headerlink" title="使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号。"></a>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号。</h6><ul><li>以此类推：</li></ul><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p></blockquote><hr><h5 id="二、段落"><a href="#二、段落" class="headerlink" title="二、段落"></a>二、段落</h5><h6 id="段落的换行是使用两个以上的空格加上回车"><a href="#段落的换行是使用两个以上的空格加上回车" class="headerlink" title="段落的换行是使用两个以上的空格加上回车"></a>段落的换行是使用两个以上的空格加上回车</h6><hr><h5 id="三、字体"><a href="#三、字体" class="headerlink" title="三、字体"></a>三、字体</h5><h6 id="用-或-包起来"><a href="#用-或-包起来" class="headerlink" title="用*或_包起来"></a>用*或_包起来</h6><ul><li><p>示例：</p><blockquote><p>*斜体文本* 或 _斜体文本_</p><blockquote><p><em>斜体文本</em></p></blockquote></blockquote><blockquote><p>** 粗体文本** 或 __ 粗体文本__</p><blockquote><p><strong>粗体文本</strong></p></blockquote></blockquote><blockquote><p>*** 斜粗体文本*** 或 ___ 斜粗体文本___</p><blockquote><p><strong><em>斜粗体文本</em></strong></p></blockquote></blockquote></li></ul><hr><h5 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h5><h6 id="可以用三个或三个以上的减号-星号-来建立一个分割线"><a href="#可以用三个或三个以上的减号-星号-来建立一个分割线" class="headerlink" title="可以用三个或三个以上的减号 星号 来建立一个分割线"></a>可以用三个或三个以上的减号 星号 来建立一个分割线</h6><ul><li>示例：<blockquote><p>*** &gt;---<br>效果：</p><blockquote><hr></blockquote></blockquote></li></ul><hr><h5 id="五、删除线"><a href="#五、删除线" class="headerlink" title="五、删除线"></a>五、删除线</h5><h6 id="在文字两端添加两个波浪线"><a href="#在文字两端添加两个波浪线" class="headerlink" title="在文字两端添加两个波浪线"></a>在文字两端添加两个波浪线</h6><ul><li>示例：<blockquote><p>没有加波浪线 1111<br>添加波浪线 ~~2222~~</p><blockquote><p><del>2222</del></p></blockquote></blockquote></li></ul><hr><h5 id="六、下划线"><a href="#六、下划线" class="headerlink" title="六、下划线"></a>六、下划线</h5><h6 id="通过-HTML-中的-u-标签实现"><a href="#通过-HTML-中的-u-标签实现" class="headerlink" title="通过 HTML 中的 u 标签实现"></a>通过 HTML 中的 u 标签实现</h6><ul><li>示例：<blockquote><p>&lt;u&gt;3&lt;&#x2F;u&gt;</p><blockquote><p><u>3333</u></p></blockquote></blockquote></li></ul><hr><h5 id="七、脚注"><a href="#七、脚注" class="headerlink" title="七、脚注"></a>七、脚注</h5><h6 id="脚注是对文本的补充说明"><a href="#脚注是对文本的补充说明" class="headerlink" title="脚注是对文本的补充说明"></a>脚注是对文本的补充说明</h6><ul><li>示例：<blockquote><p><a href="%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E3%80%82" title="是指掌握多种技能，并能利用多种技能独立完成产品的人">全栈工程师</a></p></blockquote></li></ul><hr><h5 id="八、链接"><a href="#八、链接" class="headerlink" title="八、链接"></a>八、链接</h5><h6 id="链接使用方法"><a href="#链接使用方法" class="headerlink" title="链接使用方法"></a>链接使用方法</h6><blockquote><p>[链接名称](链接地址)</p><blockquote><p><a href="https://www.runoob.com/" title="Runoob">菜鸟教程</a></p></blockquote></blockquote><blockquote><p>或者</p></blockquote><blockquote><p>&lt;链接地址&gt;</p><blockquote><p><a href="https://www.runoob.com/">https://www.runoob.com</a></p></blockquote></blockquote><blockquote><p>高级链接<br>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：<br>[github]<a href="https://github.com/">1</a> [1]: <a href="https://github.com/">https://github.com/</a></p><blockquote><p><a href="https://github.com/">github</a></p></blockquote></blockquote><hr><h5 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h5><h6 id="使用-“-“-将代码区域包起来即可"><a href="#使用-“-“-将代码区域包起来即可" class="headerlink" title="使用 “`“ 将代码区域包起来即可"></a>使用 “`“ 将代码区域包起来即可</h6><h6 id="你也可以用-96-96-96-包裹一段代码，并指定一种语言（也可以不指定）"><a href="#你也可以用-96-96-96-包裹一段代码，并指定一种语言（也可以不指定）" class="headerlink" title="你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）"></a>你也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）</h6><ul><li>示例:<blockquote><p>写法:</p><p>`&#96;&#96;javascript<br>$(document).ready(function () {<br>alert(“RUNOOB”);<br>});</p><p>`&#96;&#96;<br>演示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;RUNOOB&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2023/06/10/H5/"/>
    <url>/2023/06/10/H5/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML5-的笔记"><a href="#HTML5-的笔记" class="headerlink" title="HTML5 的笔记"></a>HTML5 的笔记</h2><p>echarts 柱状图插件<br>echarts 线上地址</p><script src="https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js"></script><p>setInterval()的返回值:每一次的序号(数字)<br>arr.push()的返回值:每一次添加后的新数组<br>jq 线上地址:</p><script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>              <p>多媒体 1.音频 <audio src=""></audio><br>html 标签的属性:<br>controls 显示浏览器默认的音频控制器<br>autoplay 自动播放(谷歌,火狐浏览器不能实现自动播放)<br>loop 循环播放(单曲循环)<br>js 音频对象(jsDOM 对象)的属性<br>只读属性<br>paused 是否暂停<br>duration 返回音频的总播放时间<br>ended 是否播放完毕<br>error 媒体发生错误的时候,返回错误代码<br>currentSrc 以字符串的形式返回媒体地址<br>可读写的属性<br>currentTime 当前播放的时间<br>volume 音量 取值范围:0-1<br>muted 设置静音 true 静音 false 不静音<br>方法<br>play()播放<br>pause()暂停<br>音频对象的事件<br>aud.onplay &#x3D; function(){} 播放时触发<br>aud.onended &#x3D; function(){} 播放结束时触发<br>aud.onpause &#x3D; function(){} 暂停时触发<br>aud.ontimeupdate &#x3D; function(){} 播放时间变化时触发 2.视频 <video src=""></video><br>poster:视频播放前的预览图片<br>width、height :设置视频的尺寸<br>videoWidth、videoHeight:视频的实际尺寸(只读)<br>全屏<br>判断是不是全屏<br>document.isFullScreen()<br>document.webkitIsFullScreen()兼容谷歌<br>document.mozIsFullScreen()兼容火狐<br>设置全屏<br>box.requestFullScreen()<br>box.webkitRequestFullScreen()兼容谷歌<br>box.mozRequestFullScreen()兼容火狐<br>box.msRequestFullScreen()兼容 ie<br>取消全屏<br>document.cancelFullScreen()<br>document.webkitCancelFullScreen()兼容谷歌<br>document.mozCancelFullScreen()兼容火狐<br>document.msExitFullScreen()兼容 ie<br>文件读取器<br>打开文件表单的新控件 multiple 允许选择多个文件提交<br><input type="file" multiple> 1.创建文件读取器对象<br>var reader &#x3D; new FileReader(); 2.读取文件<br>reader.readAsDataURL()将文件读取为路径<br>reader.readAsText()将文件读取为文字 3.等待文件读取完毕<br>reader.onload &#x3D; function(){<br>this.result;&#x2F;&#x2F;获取读取的结果<br>}<br>H5 新标签</p><header>头部</header><article>内容</article><aside>侧边区域</aside><nav>导航</nav><section>区块</section><main>主体</main><footer>底部</footer><time>时间</time><label>称谓</label><mark>标记</mark><video>视频</video><audio>音频</audio><address>地址(默认为斜体)</address>组合标签<details open>描述文档或文档某个部分的细节</details>open属性是默认展开<dialog>一段对话</dialog><hgroup>标题</hgroup><progress>过度条</progress><summary>元素的标题</summary><datalist>input的提示列表</datalist>例:<input type="text" list="valList">    <datalist id="valList">        <option value="javascript">javascript</option>        <option value="jQuery">jQuery</option>        <option value="HTML5">HTML5</option>    </datalist><p>Canvas 画布：<br>什么是 canvas?<br>1-canvas 是 HTML5 提供的一种新标签<canvas></canvas><br>2-HTML5 <canvas>标签元素用于图形的绘制，通过脚本 (通常是 JavaScript)来完成。<br>3-<canvas>标签只是图形容器，必须使用脚本（js）来绘制图形。<br>4-Canvas 是一个矩形区域的画布，可以用 JavaScript 在上面绘画。控制其每一个像素。</p><p>canvas 默认在页面上的大小是 width:300px; height:150px;<br>是图形容器 比须使用（js）来绘制图形<br>canvas：的作用：<br>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制 2d 图像<br>Canvas 是逐像素进行渲染的。<br>画布是一个矩形区域，可以控制其每一个像素<br>canvas 拥有多种绘制矩形、路径、圆形、字符以及添加图像的方法<br>写的 3 步 cnavas：</p><p>fillStyle 属性填充颜色 这个属性是全局 要写在填充矩形上面<br>cxt.fillStyle&#x3D;‘red’</p><p>绘制矩形(实心)有二办法：<br>第一种：<br>fillRect(x,y,w,h)填充矩形(实心)默认颜色黑色<br>X,y 水平垂直坐标 w,h 矩形宽高<br>cxt.fillRect<br>第二种：<br>cxt.rect(100,100,100,100) cxt.fill()<br>strokeStyle 属性填充颜色 这个属性是全局 要写在边框矩形上面<br>cxt.strokeStyle&#x3D;‘red’</p><p>绘制矩形(空心)有二办法：<br>第一种：<br>strokeRect(x,y,w,h) 绘制一个边框矩形(空心)默认颜色黑色<br>cxt.strokeRect()<br>第二种：<br>cxt.rect(100,100,100,100) cxt.stroke()<br>beginPath() 开始绘制一个路径 每写一个图形就要写<br>cxt.beginPath();<br>save()和 restore() 第一种：要一起写类是于一个 div 包裹<br>代表 save 保存图像状态 restore 恢复图像状态</p><p>lineWidth 边框加粗<br>lineWidth&#x3D;30；</p><p>绘制多边形：<br>moveTo(x,y) 绘制路径第一个点的坐标<br>cxt.moveTo(50,300)<br>lineTo(x,y) 绘制路径其他点的坐标<br>cxt.lineTo(20,300)<br>closePath() 第一个点和最后一个点进行链接<br>clearRect(x,y,w,h) 删除一块矩形的区域<br>cxt.clearRect(0,0,oc.width,oc.hieght)</p><p>制作圆弧：<br>arc(x(圆心坐标),y(圆心坐标),r(半径),起始弧度,结束弧度,绘制方向) false 顺时针 true 逆时针<br>arc 就是确定一个圆点的二个点,0 度对应的是 3 点钟方向<br>公式<em>Math.PI&#x2F;180<br>arc(300,300,100,30</em>Math.PI&#x2F;180,60*Math.PI&#x2F;180,,false)</p><p>绘制曲线<br>arcTo(xy,xy,r)<br>第一组坐标 第二组坐标 半径</p><p>canvas 中的 2d 转换<br>translate 位移 cxt.translate(200,200);<br>设置中心 写的形状多大就是他的一半 cxt.translate(-100,-100);<br>rotate 旋转 cxt.rotate(30*Math.PI&#x2F;180) 要写公式<br>scale 缩小放大 cxt.scale(2,2)</p><p>图片预加载：<br>第一步 创建一个构造函数<br>var img&#x3D;new Image<br>第二步 给 img.src 赋值<br>img.src&#x3D;‘图片路径’<br>第三步 图片完全加载后会自动执行一事件<br>img.onload&#x3D;function(){this 就是图片完全加载后的对象}</p><p>绘制插入图片<br>cxt.drawImage(img,x,y,w,h)<br>img:当前图片 x,y 坐标 w,h 宽高</p><p>什么是预加载<br>提前加载图片，当用户需要查看时可直接从本地缓存中渲染</p><p>什么是懒加载<br>当访问一个页面的时候，先把 img 元素或是其他元素的背景图片路径替换成一张大小为 1*1px 图片的路径（这样就只需请求一次，俗称占位图）<br>只有当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来。这就是图片懒加载</p><p>canvas 设置背景：<br>createPattern(img,平铺) no-repeat 不平铺 repeat 平铺<br>repeat-x 水平平铺 repeat-y 垂直平铺</p><p>canvas 文本操作：<br>strokeText(文字,x,y) 文字边框 文字 水平 垂直</p><p>fillText(文字,x,y) 文字填充 文字 水平 垂直</p><p>font 文字大小 4 个值 样式 大小 加粗 字体<br>cxt.font&#x3D;italic 60px bold Arial</p><p>textAlign 水平方式对齐 3 个值 left right center<br>cxt.textAlign&#x3D;’center’</p><p>textBaseline 垂直方式对齐 3 个值 top bottom middle<br>cxt.textBaseline&#x3D;’top’</p><p>measureText(文字) 检查字体宽度<br>cxt.measureText().width</p><p>文字阴影<br>shadowOffsetY y 轴偏移</p><p>shadowOffsetX x 轴偏移</p><p>shadowBlur 高斯模糊值</p><p>shadowColor 阴影颜色</p><p>canvas 关于像素的操作<br>ctx.drawImage(img,x,y,w,h)在画布上画图片<br>ctx.getImageData(x,y,w,h)获取图像数据<br>x,y 表示位置 wh 表示宽高<br>属性包括 width：一行的像素个数 height：一列的个数 data：一个数组，包含 rgba 四个值，每个值都位于 0——255 之间的整数<br>ctx.putImageData(设置图像，x，y) 将图片对象数据画到画布上<br>ctx.createImageData(w,h) 创建图片对象（设置新的像素矩阵，初始值是全透明的黑色 同样会返回三个属性 width height data）<br>toDataURL() 将画布导出为图像 返回是一个字符串<br>var base&#x3D;oC.toDataURL();<br>Img.src&#x3D;base<br>这个字符串 是一个特殊的格式编码 base64 格式编码<br>base64 格式编码 1.这个格式编码可以直接被多媒体(img,video,audio)的 src 属性识别<br>2.base64 格式编码属于二进制,所以压缩性能很强,最大压缩比率达到 50%,1Mb 的图片–》500K 左右 有损压缩,会降低图片的质量 3.将图片转成 base64 格式编码 会比原有图片体积要大,大三分之一左右 10mb 图片—》13mb base64 压缩一半》7,5mb<br>前端性能优化法案之一:<br>图片转成 base64 格式编码,好处:减少 http 请求<br>缺点:加载 css 时间会变慢一点</p><p>cdn 托管（这个没有讲）<br>Svg<br>SVG 是一种基于 XML 语法的图像格式，全称是可缩放矢量图（Scalable Vector Graphics）</p><p>什么是 svg：<br>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准</p><p>xml 使用规范（基本语法）<br>1.xml 文档的后缀名必须为.xml<br>2.xml 第一行必须定义为文档声明<br>3.xml 文档中有且仅有一个根标签【就是只能有一个根标签】 4.属性值必须使用双引号或单引号引起来 5.标签必须是有开始和有结束的<br>6.xml 是区分大小写的</p><p>xmlns 命名空间：属性值这个网址是一套规则  ，这个规则里定义了 xmlns&#x3D;‘<a href="http://www.w3.org/2000/svg%E2%80%99">http://www.w3.org/2000/svg’</a><br>含义：规定标签的作用</p><p>circle(cx,cy,r) 圆形<br>cx(圆心水平方向坐标) cy(圆心垂直方向坐标) r（半径）<br>fill(填充颜色) storke(边框颜色) storke-width(边框宽度) transparent&#x2F;none(透明)</p><p>rect(width,height,x,y,)矩形<br>width(矩形宽度) height(矩形高度)<br>x(水平方向坐标) y(垂直方向坐标)<br>rx（矩形圆角的弧度水平方向上的半径） ry（矩形圆角的弧度垂直方向的半径）</p><p>line(x1,y1,x2,y2)线段<br>x1(起始点的水平方向坐标) y1(起始点的垂直方向坐标)<br>x2(终点的水平方向坐标) y2(终点的垂直方向坐标)<br>storke-opacity(线段颜色的透明度)</p><p>svg 引入有三种：<br>第一种:<img src=’路径地址’><br>第二种:<iframe src=’路径地址’ frameborder=’0’></iframe><br>第三种:直接使用 svg 标签</p><div><svg xmlns=’http://www.w3.org/2000/svg’></svg></div>g标签 类是一个div公有属性可以实现  fill stroke  stroke-width  stroke-opacity(none/transparent)transform：translate(300,300)<p>g 标签表示分组的意思,g 标签可以理解为将里面所有的子标签当做一个整体,g 标签中定义的属性,会被里面子标签继承 属性是有限制的<br>只有公有属性才能被定义到 g 标签中,可以给 g 标签加一个 id 或者 class,操作 g 标签,就等于操作了里面所有子标签</p><p>polyline (points 水平 垂直 坐标) 标签用于绘制一根折线，水平坐标与垂直坐标之间用逗号分隔，点与点之间用空格分隔<br>&lt;polyline points&#x3D;’50,50 300,150 175,300’&gt;</p><p>polygon (points 水平 垂直 坐标) 标签用于绘制多边形(线连接一起)<br>&lt;polygon points&#x3D;’50,50 300,150 175,300’&gt;</p><p>ellipse(cx cy rx ry)标签用于绘制椭圆，cx 和 cy 属性指定了椭圆中心的水平坐标和垂直坐标,rx 和 ry 属性指定了椭圆的水平半径和垂直半径<br>path 用于绘制路径 path 表示路径有一个 d 属性 属性中<br>M 大写的 M 表示绘制第一个点跟 canvas.moveTo(x,y)效果一样<br>L 表示绘制其他的点 跟 canvas.lineTo(x,y)效果一样<br>Z 表示闭合路径 和 canvas.closePath()效果一样</p><p>text(text-anchor&#x3D;’middle’) text-anchor 水平居中 标签 元素内部可以放任何的文字</p><p>在 SVG 中有两种截然不同的文本模式. 一种是写在图像中的文本，另一种是 SVG 字体，现在我们主要集中前者：写在图像中的文本。</p><p>image(x,y,width,height xlink:href)<br>X&#x2F;y 水平垂直 width&#x2F;height 大小 xlink:href&#x3D;’图片路径’标签</p><p>use(x,y,href)标签用于复制一个形状<br>href 属性指定索要复制的节点<br>X&#x2F;y 属性为水平和垂直方向的坐标<br><use href=’#1’ x=’50’ y=’50’></use><br>defs 标签 需要再次使用的引用元素定义在 defs 元素里面在 defs 元素中定义的图形元素不会直接呈现利用 <use>元素呈现这些元素</p><p>本地存储<br>将数据保存到本地主机的硬盘里<br>本地存储的含义:浏览器里 将一些所需要的数据保存到电脑硬盘里的 一种方式<br>cookie 1.需要服务器环境 才能运行 2.存储数据的格式为 key &#x3D; val(键值对) 字符串 3.默认为临时存储 关闭浏览器数据自动删除 可以设置存储时间(保质期) 4.存储数据的大小为 4KB<br> 5.同源(同端口,同域名,同协议)的数据可以共享<br>localStorage 永久存储 1.不需要服务器环境 就能运行 在浏览器就能用 2.存储数据的格式为 字符串(json 字符串) 3.默认为永久存储 只能手动删除 数据才能删除 4.存储数据的大小为 5MB 5.同源(同端口,同域名,同协议)的数据可以共享<br>sessionStorage 临时存储 1.不需要服务器环境 就能运行 在浏览器就能用 2.存储数据的格式为 字符串(json 字符串) 3.默认为永久存储 浏览器或页面关闭 数据自动删除 4.存储数据的大小为 5MB 5.同页面的数据可以共享<br>JSON.stringify()将 js 对象转为字符串对象<br>JSON.parse()将字符串对象转为 js 对象</p><p>Cookie<br>数据的生命周期: 一般由服务器生成，可设置失效时间。如果在浏览器端生成 Cookie，默认是关闭浏览器后失效<br>存放数据大小 4K 左右<br>与服务器端通信 每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题<br>localStorage<br>数据的生命周期： 除非被清除，否则永久保存<br>存放数据大小 一般为 5MB 左右<br>与服务器端通信 仅在客户端（即浏览器）中保存，不参与和服务器的通信<br>sessionStorage<br>数据的生命周期: 仅在当前会话下有效，关闭页面或浏览器后被清除<br>存放数据大小 一般为 5MB 左右<br>与服务器端通信 仅在客户端（即浏览器）中保存，不参与和服务器的通信</p><p>getItem(读取内容) 获取数据<br>setItem(存储内容) 设置存储数据<br>removeItem() 删除键值对 key 的存储内容<br>clear()清空所有存储内容</p>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/17/hello-world/"/>
    <url>/2022/11/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>常用的 hexo<br>常见命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至 public 目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口 4000，&#x27;ctrl + c&#x27;关闭 server）</span><br>hexo deploy <span class="hljs-meta">#部署到 GitHub</span><br>hexo help <span class="hljs-meta"># 查看帮助</span><br>hexo version <span class="hljs-meta">#查看 Hexo 的版本</span><br></code></pre></td></tr></table></figure><p>缩写</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deploy<br><br></code></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> s -g <span class="hljs-comment">#生成并本地预览</span><br>hexo d -g <span class="hljs-comment">#生成并上传</span><br></code></pre></td></tr></table></figure><p>书写完整格式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">postName</span> <span class="hljs-comment">#文章页面上的显示名称，一般是中文</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013-12-02 15:30:16</span> <span class="hljs-comment">#文章生成时间，一般不改，当然也可以任意修改</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">默认分类</span> <span class="hljs-comment">#分类</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">tag1</span>, <span class="hljs-string">tag2</span>, <span class="hljs-string">tag3</span>] <span class="hljs-comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">附加一段文章摘要，字数最好在</span> <span class="hljs-number">140</span> <span class="hljs-string">字以内，会出现在</span> <span class="hljs-string">meta</span> <span class="hljs-string">的</span> <span class="hljs-string">description</span> <span class="hljs-string">里面</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">以下是正文</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/17/hello-world%20copy/"/>
    <url>/2022/11/17/hello-world%20copy/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>常用的 hexo<br>常见命令</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-meta">#新建页面</span><br>hexo generate <span class="hljs-meta">#生成静态页面至 public 目录</span><br>hexo <span class="hljs-keyword">server</span> <span class="hljs-meta">#开启预览访问端口（默认端口 4000，&#x27;ctrl + c&#x27;关闭 server）</span><br>hexo deploy <span class="hljs-meta">#部署到 GitHub</span><br>hexo help <span class="hljs-meta"># 查看帮助</span><br>hexo version <span class="hljs-meta">#查看 Hexo 的版本</span><br></code></pre></td></tr></table></figure><p>缩写</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">hexo n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo new<br>hexo g <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo generate<br>hexo s <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo server<br>hexo d <span class="hljs-operator">=</span><span class="hljs-operator">=</span> hexo deploy<br><br></code></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> s -g <span class="hljs-comment">#生成并本地预览</span><br>hexo d -g <span class="hljs-comment">#生成并上传</span><br></code></pre></td></tr></table></figure><p>书写完整格式:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">postName</span> <span class="hljs-comment">#文章页面上的显示名称，一般是中文</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013-12-02 15:30:16</span> <span class="hljs-comment">#文章生成时间，一般不改，当然也可以任意修改</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">默认分类</span> <span class="hljs-comment">#分类</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">tag1</span>, <span class="hljs-string">tag2</span>, <span class="hljs-string">tag3</span>] <span class="hljs-comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">附加一段文章摘要，字数最好在</span> <span class="hljs-number">140</span> <span class="hljs-string">字以内，会出现在</span> <span class="hljs-string">meta</span> <span class="hljs-string">的</span> <span class="hljs-string">description</span> <span class="hljs-string">里面</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">以下是正文</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>语义化标签</title>
    <link href="/2022/11/17/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/11/17/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是-HTML-语义化标签？"><a href="#什么是-HTML-语义化标签？" class="headerlink" title="什么是 HTML 语义化标签？"></a>什么是 HTML 语义化标签？</h2><h4 id="语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。"><a href="#语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。" class="headerlink" title="语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。"></a>语义化标签，就是让标签有自己的含义，利用本身传达它所包含内容的一些信息，使浏览器和搜索引擎直观的认识标签和属性的用途和作用。</h4><h2 id="为什么要用-H5-语义化标签？"><a href="#为什么要用-H5-语义化标签？" class="headerlink" title="为什么要用 H5 语义化标签？"></a>为什么要用 H5 语义化标签？</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="DIV-标签本身就是一个容器，并没有独特的含义，当大量使用-div-会使文档结构不够清晰，同时影响对页面的读取"><a href="#DIV-标签本身就是一个容器，并没有独特的含义，当大量使用-div-会使文档结构不够清晰，同时影响对页面的读取" class="headerlink" title="DIV 标签本身就是一个容器，并没有独特的含义，当大量使用 div 会使文档结构不够清晰，同时影响对页面的读取"></a>DIV 标签本身就是一个容器，并没有独特的含义，当大量使用 div 会使文档结构不够清晰，同时影响对页面的读取</h4><h4 id="在没有-CSS-的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。"><a href="#在没有-CSS-的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。" class="headerlink" title="在没有 CSS 的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。"></a>在没有 CSS 的时候，开发者不能够清晰地看出网页的结构，不利于于团队的开发和维护。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 网页头部标签 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>网页导航栏<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 章节区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>        内容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 主要内容 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 主体 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 章节 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span> 内容 <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 侧边区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>c<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>网页尾部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多媒体标签的属性</title>
    <link href="/2022/11/17/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/11/17/%E5%A4%9A%E5%AA%92%E4%BD%93%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="多媒体标签的属性"><a href="#多媒体标签的属性" class="headerlink" title="多媒体标签的属性"></a>多媒体标签的属性</h1><h2 id="html"><a href="#html" class="headerlink" title="html:"></a>html:</h2><h3 id="音频标签："><a href="#音频标签：" class="headerlink" title="音频标签："></a>音频标签：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br>    标签属性:<br>    autoplay    自动播放<br>    controls    显示控件<br>    loop        循环播放<br><br></code></pre></td></tr></table></figure><h3 id="视频标签："><a href="#视频标签：" class="headerlink" title="视频标签："></a>视频标签：</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">&lt;video&gt;&lt;/video&gt;<br>autoplay    自动播放<br>controls    显示控件<br>loop        循环播放<br><br><span class="hljs-section">特有属性:poster 视频预览图片</span><br><span class="hljs-section">width:设置宽</span><br><span class="hljs-section">height:设置高</span><br><br></code></pre></td></tr></table></figure><h2 id="js"><a href="#js" class="headerlink" title="js:"></a>js:</h2><h3 id="音频对象"><a href="#音频对象" class="headerlink" title="音频对象:"></a>音频对象:</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 获取音频<br>var aud=document.querySelector(<span class="hljs-string">&#x27;audio&#x27;</span>)<br><span class="hljs-regexp">//</span> 获取视频<br>var vid=document.querySelector(<span class="hljs-string">&#x27;video&#x27;</span>)<br><br><span class="hljs-regexp">//</span> 对象属性<br><span class="hljs-regexp">//</span> 只读属性：<br>aud.duration  <span class="hljs-regexp">//</span>音频的总时间  (只读属性) 未加载音频时为NAN<br>aud.paused  <span class="hljs-regexp">//</span>媒体是否暂停    返回布尔值true或flase  (只读属性)<br>aud.ended    <span class="hljs-regexp">//</span>是否播放结束 返回布尔值true或flase  (只读属性)<br><br><span class="hljs-regexp">//</span> 可修改属性:<br>aud.muted         <span class="hljs-regexp">//</span>读取、设置静音 true/false<br>aud.currentTime   <span class="hljs-regexp">//</span>读取、设置当前播放的时间<br>aud.volume        <span class="hljs-regexp">//</span>读取、设置音量大小 <span class="hljs-number">0</span>~<span class="hljs-number">1</span><br><br><span class="hljs-regexp">//</span> 对象的方法：(参数，返回值)<br>aud.play()        <span class="hljs-regexp">//</span>播放的方法<br>aud.pause()       <span class="hljs-regexp">//</span>暂停的方法<br><br><span class="hljs-regexp">//</span> 事件 DOM 对象的属性：<br>aud.oncanplay=<span class="hljs-keyword">function</span>()&#123;&#125;      <span class="hljs-regexp">//</span>加载完毕后允许播放时触发<br>aud.onpause=<span class="hljs-keyword">function</span>()&#123;&#125;        <span class="hljs-regexp">//</span>暂停时触发<br>aud.onplay=<span class="hljs-keyword">function</span>()&#123;&#125;         <span class="hljs-regexp">//</span>播放开始时触发<br>aud.onended=<span class="hljs-keyword">function</span>()&#123;&#125;        <span class="hljs-regexp">//</span>播放结束时触发<br>aud.ontimeupdate=<span class="hljs-keyword">function</span>()&#123;&#125;   <span class="hljs-regexp">//</span>播放中触发<br><br><span class="hljs-regexp">//</span> 自定义属性：<br>aud.tt<br>aud.timer<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML5</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解jQuery</title>
    <link href="/2022/11/17/%E4%BA%86%E8%A7%A3jQ/"/>
    <url>/2022/11/17/%E4%BA%86%E8%A7%A3jQ/</url>
    
    <content type="html"><![CDATA[<h3 id="jQuery-是什么"><a href="#jQuery-是什么" class="headerlink" title="jQuery 是什么"></a>jQuery 是什么</h3><p>jQuery 是目前使用最广泛的 javascript 函数库。据统计，全世界排名前 100 万的网站，有 46% 使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。对于网页 开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习 更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。<br>jQuery 是一个快速、简洁的 JavaScript 框架，可以简化查询 DOM 操作、事件处理、制作动 画和 Ajax 交互<br>jQuery 设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。<br>2006 年 1 月，John Resig 发布了第一个版本。</p><h2 id="jQuery-特点"><a href="#jQuery-特点" class="headerlink" title="jQuery 特点"></a>jQuery 特点</h2><p><strong>轻量级的 JS 函数库</strong><br><strong>丰富的 DOM 选择器</strong><br><strong>链式表达式：可以把多个操作写在一行代码里，更为简洁。</strong><br><strong>时间，样式，动画支持</strong><br><strong>Ajax 操作支持</strong><br><strong>跨浏览器兼容</strong><br><strong>插件扩展开发：有着丰富的第三方插件，如：树形菜单，日期控件，图片切 换插件，弹出窗口等等</strong><br>jQuery 主要解决了两大问题: （1）它提供了一整套简洁的 API 用于操作 Dom。<br>（2）它抹平了不同浏览器的差异<br>API：英文全称 Application Programming Interface，翻译为“应用程序编程接口”。是一些预 先定义的函数<br>jQuery 下载地址：<a href="http://www.jq22.com/jquery-info122">http://www.jq22.com/jquery-info122</a>此网站有不同版本的 jq 可供下载使用<br>使用版本注意<br>1.x 兼容 ie678，使用最为广泛，官方只做 BUG 维护，功能不再新增。最终版本：1.12.4 (2016 年 5 月 20 日)<br>2.x 不兼容 ie678，官方只做 BUG 维护，功能不再新增。如果不考虑兼容低版本的浏览 器可以使用 2.x，最终版本：2.2.4 (2016 年 5 月 20 日)<br>3.x 不兼容 ie678，只支持最新的浏览器。除非特殊要求，一般不会使用 3.x 版本，很多 老的 jQuery 插件不支持这个版本。目前该版本是官方主要更新维护的版本。<br>查看 JQuery 的版本：控制台输出 $.fn.jquery 会返回当前的版本号<br>查看是否成功引入：控制台输出 $&#x3D;&#x3D;&#x3D;jQuery 返回 true 表示成功引入</p><h2 id="文档就绪事件："><a href="#文档就绪事件：" class="headerlink" title="文档就绪事件："></a>文档就绪事件：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//原生js：</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><br><span class="hljs-comment">// jQuery：</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;jquery 代码&#125;)<br><br><span class="hljs-comment">// 简写：</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;jquery 代码&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// DOM 加载完毕后就执行，不必等到整个网页资源加载完毕可以同时执行多个</span><br>$(<span class="hljs-variable language_">document</span>) .<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br><span class="hljs-comment">// 必须等到页面内包括图片的所有元素和资源加载完毕后才能执行</span><br><span class="hljs-variable language_">window</span>. onload = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="注：不能同时执行多个，如果有多个-window-onload-方法，只会其中执行一个选择器是-jQuery-的根基，在-jQuery-中，对事件处理、遍历-DOM-以及-ajax-操作都依赖于选-择器。jQuery-选择器完全继承了-CSS-的风格，两者的写法十分相似，只不过两者的作用-效果不同。CSS-选择器找到元素后添加样式，而-jQuery-选择器找到元素后添加行为。"><a href="#注：不能同时执行多个，如果有多个-window-onload-方法，只会其中执行一个选择器是-jQuery-的根基，在-jQuery-中，对事件处理、遍历-DOM-以及-ajax-操作都依赖于选-择器。jQuery-选择器完全继承了-CSS-的风格，两者的写法十分相似，只不过两者的作用-效果不同。CSS-选择器找到元素后添加样式，而-jQuery-选择器找到元素后添加行为。" class="headerlink" title="注：不能同时执行多个，如果有多个 window.onload 方法，只会其中执行一个选择器是 jQuery 的根基，在 jQuery 中，对事件处理、遍历 DOM 以及 ajax 操作都依赖于选 择器。jQuery 选择器完全继承了 CSS 的风格，两者的写法十分相似，只不过两者的作用 效果不同。CSS 选择器找到元素后添加样式，而 jQuery 选择器找到元素后添加行为。"></a>注：不能同时执行多个，如果有多个 window.onload 方法，只会其中执行一个选择器是 jQuery 的根基，在 jQuery 中，对事件处理、遍历 DOM 以及 ajax 操作都依赖于选 择器。jQuery 选择器完全继承了 CSS 的风格，两者的写法十分相似，只不过两者的作用 效果不同。CSS 选择器找到元素后添加样式，而 jQuery 选择器找到元素后添加行为。</h5>]]></content>
    
    
    <categories>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery,笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
